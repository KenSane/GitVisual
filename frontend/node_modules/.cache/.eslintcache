[{"C:\\Users\\janry\\Music\\VisualQuery\\frontend\\src\\index.js":"1","C:\\Users\\janry\\Music\\VisualQuery\\frontend\\src\\App.js":"2","C:\\Users\\janry\\Music\\VisualQuery\\frontend\\src\\utils\\PrivateRoute.js":"3","C:\\Users\\janry\\Music\\VisualQuery\\frontend\\src\\context\\AuthContext.js":"4","C:\\Users\\janry\\Music\\VisualQuery\\frontend\\src\\blocks\\select.js":"5","C:\\Users\\janry\\Music\\VisualQuery\\frontend\\src\\blocks\\tablesAndAttributes.js":"6","C:\\Users\\janry\\Music\\VisualQuery\\frontend\\src\\blocks\\aliases.js":"7","C:\\Users\\janry\\Music\\VisualQuery\\frontend\\src\\blocks\\logicalOperators.js":"8","C:\\Users\\janry\\Music\\VisualQuery\\frontend\\src\\blocks\\mathematicalOperators.js":"9","C:\\Users\\janry\\Music\\VisualQuery\\frontend\\src\\blocks\\valueInputs.js":"10","C:\\Users\\janry\\Music\\VisualQuery\\frontend\\src\\blocks\\aggregateBlocks.js":"11","C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\index.js":"12","C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\App.js":"13","C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\component\\Homepage.js":"14","C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\utils\\PrivateRoute.js":"15","C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\context\\AuthContext.js":"16","C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\component\\Dashboard.js":"17","C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\component\\AuthPage.js":"18","C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\component\\Quizcomp.js":"19","C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\component\\Visprogpage.js":"20","C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\component\\Navbar.js":"21","C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\component\\RealTimePessimism.js":"22","C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\component\\Modules.js":"23","C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\component\\Components.js":"24","C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\component\\VisualProgramming.js":"25","C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\component\\Quizpage.js":"26","C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\component\\Button.js":"27","C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\component\\EmotionDetection.js":"28","C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\blocks\\select.js":"29","C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\blocks\\aliases.js":"30","C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\blocks\\logicalOperators.js":"31","C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\blocks\\tablesAndAttributes.js":"32","C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\blocks\\valueInputs.js":"33","C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\blocks\\mathematicalOperators.js":"34","C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\blocks\\aggregateBlocks.js":"35","C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\component\\Sidebar.js":"36","C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\component\\Sides.js":"37","C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\context\\VideoContext.js":"38"},{"size":230,"mtime":1717744765961,"results":"39","hashOfConfig":"40"},{"size":1198,"mtime":1717746202456,"results":"41","hashOfConfig":"40"},{"size":347,"mtime":1717744765962,"results":"42","hashOfConfig":"40"},{"size":4190,"mtime":1717759682851,"results":"43","hashOfConfig":"40"},{"size":8861,"mtime":1717744765946,"results":"44","hashOfConfig":"40"},{"size":3668,"mtime":1717744765948,"results":"45","hashOfConfig":"40"},{"size":1886,"mtime":1717744765936,"results":"46","hashOfConfig":"40"},{"size":5438,"mtime":1717744765943,"results":"47","hashOfConfig":"40"},{"size":5125,"mtime":1717744765944,"results":"48","hashOfConfig":"40"},{"size":5365,"mtime":1717744765948,"results":"49","hashOfConfig":"40"},{"size":5484,"mtime":1717744765935,"results":"50","hashOfConfig":"40"},{"size":230,"mtime":1717744765000,"results":"51","hashOfConfig":"52"},{"size":1319,"mtime":1718160404520,"results":"53","hashOfConfig":"52"},{"size":750,"mtime":1718020056735,"results":"54","hashOfConfig":"52"},{"size":347,"mtime":1717744765000,"results":"55","hashOfConfig":"52"},{"size":4214,"mtime":1718050193947,"results":"56","hashOfConfig":"52"},{"size":2788,"mtime":1718099845556,"results":"57","hashOfConfig":"52"},{"size":3713,"mtime":1718172477938,"results":"58","hashOfConfig":"52"},{"size":245,"mtime":1717744765000,"results":"59","hashOfConfig":"52"},{"size":212,"mtime":1717744765000,"results":"60","hashOfConfig":"52"},{"size":2931,"mtime":1718099476619,"results":"61","hashOfConfig":"52"},{"size":1833,"mtime":1718083332954,"results":"62","hashOfConfig":"52"},{"size":31218,"mtime":1718163653345,"results":"63","hashOfConfig":"52"},{"size":4072,"mtime":1718048399233,"results":"64","hashOfConfig":"52"},{"size":6356,"mtime":1718164940650,"results":"65","hashOfConfig":"52"},{"size":9344,"mtime":1718162989553,"results":"66","hashOfConfig":"52"},{"size":743,"mtime":1717744765000,"results":"67","hashOfConfig":"52"},{"size":4896,"mtime":1717802277000,"results":"68","hashOfConfig":"52"},{"size":8861,"mtime":1717744765000,"results":"69","hashOfConfig":"52"},{"size":1886,"mtime":1717744765000,"results":"70","hashOfConfig":"52"},{"size":5438,"mtime":1717744765000,"results":"71","hashOfConfig":"52"},{"size":3668,"mtime":1717744765000,"results":"72","hashOfConfig":"52"},{"size":5365,"mtime":1717744765000,"results":"73","hashOfConfig":"52"},{"size":5125,"mtime":1717744765000,"results":"74","hashOfConfig":"52"},{"size":5484,"mtime":1717744765000,"results":"75","hashOfConfig":"52"},{"size":586,"mtime":1717744765000,"results":"76","hashOfConfig":"52"},{"size":842,"mtime":1718050470730,"results":"77","hashOfConfig":"52"},{"size":731,"mtime":1718095682318,"results":"78","hashOfConfig":"52"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"3m2zkq",{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"82"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"82"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"82"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"82"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"82"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"82"},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"82"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},"1czpcom",{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"123"},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"123"},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"165","messages":"166","suppressedMessages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"171","messages":"172","suppressedMessages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"123"},{"filePath":"175","messages":"176","suppressedMessages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"123"},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"181","messages":"182","suppressedMessages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"123"},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"123"},{"filePath":"187","messages":"188","suppressedMessages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"123"},{"filePath":"190","messages":"191","suppressedMessages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"123"},{"filePath":"193","messages":"194","suppressedMessages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"123"},{"filePath":"196","messages":"197","suppressedMessages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","suppressedMessages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","suppressedMessages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},"C:\\Users\\janry\\Music\\VisualQuery\\frontend\\src\\index.js",[],[],[],"C:\\Users\\janry\\Music\\VisualQuery\\frontend\\src\\App.js",["205","206"],[],"import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport PrivateRoute from './utils/PrivateRoute';\r\nimport { AuthProvider } from './context/AuthContext';\r\nimport Homepage from './component/Homepage';\r\nimport Dashboard from './component/Dashboard';\r\nimport Navbar from './component/Navbar';\r\nimport Modules from './component/Modules';\r\nimport AuthPage from './component/AuthPage';\r\nimport Visprogpage from './component/Visprogpage';\r\nimport Quizcomp from './component/Quizcomp';\r\nimport RealTimePessimism from './component/RealTimePessimism';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <AuthProvider>\r\n        <Navbar />\r\n        <Switch>\r\n          <Route component={Homepage} path=\"/\" exact />\r\n          <Route component={AuthPage} path=\"/authpage\" exact />\r\n          <Route component={Modules} path=\"/modules\" exact />\r\n          <Route component={Visprogpage} path=\"/visprogpage\" exact />\r\n          <Route component={Quizcomp} path=\"/quizcomp\" exact />\r\n          <Route component={RealTimePessimism} path=\"/realtimepessimism\" exact />\r\n        </Switch>\r\n      </AuthProvider>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\janry\\Music\\VisualQuery\\frontend\\src\\utils\\PrivateRoute.js",[],[],"C:\\Users\\janry\\Music\\VisualQuery\\frontend\\src\\context\\AuthContext.js",[],[],"C:\\Users\\janry\\Music\\VisualQuery\\frontend\\src\\blocks\\select.js",["207","208","209","210","211","212","213","214","215","216"],[],"import * as Blockly from 'blockly/core';\r\nimport { pythonGenerator } from 'blockly/python'; // Import the Python generator\r\nimport 'blockly/python';\r\n\r\nconst tableNames = [\r\n  ['Department', 'Department'],\r\n  ['Professor', 'Professor'],\r\n  ['Student', 'Student'],\r\n  ['Course', 'Course'],\r\n  ['Enrollment', 'Enrollment'],\r\n  ['Class', 'Class']\r\n];\r\n\r\nexport const defineSelectBlocks = () => {\r\n  // Define the 'select' block\r\n  Blockly.Blocks['select'] = {\r\n    init: function() {\r\n      this.appendValueInput('SELECT')\r\n        .appendField('SELECT   ')\r\n        .setCheck(['freeinput', 'tablename_as', 'ALL', 'CONDITIONCHOOSER', 'aggregate_min', 'aggregate_max', 'aggregate_avg', 'aggregate_sum', 'aggregate_count'])\r\n        .appendField(new Blockly.FieldDropdown([[\"\\u2009\", 'blank'], [\"ALL\", 'all'], [\"DISTINCT\", 'distinct']]), 'option');\r\n      this.setInputsInline(false);\r\n      this.setPreviousStatement(true, ['SELECT', 'WHERE', 'GROUP BY', 'HAVING', 'ORDER BY', 'FROM']);\r\n      this.setNextStatement(true, ['SELECT', 'WHERE', 'GROUP BY', 'HAVING', 'ORDER BY', 'FROM']);\r\n      this.setColour('#8007f2');\r\n    }\r\n  };\r\n\r\n  // Define the Python generator for the 'select' block\r\n  pythonGenerator.forBlock['select'] = function(block, generator) {\r\n    var select = pythonGenerator.statementToCode(block, 'SELECT');\r\n    if (select.endsWith(',')) {\r\n      select = select.slice(0, -1);\r\n    }\r\n    select = select.replace(/'/g, '\"');\r\n    var option = block.getFieldValue('option');\r\n    var code = (option === 'distinct') ? 'SELECT DISTINCT ' : 'SELECT ';\r\n    code += select + ' ';\r\n    return code;\r\n  };\r\n\r\n  // Define the 'select_from' block\r\n  Blockly.Blocks['select_from'] = {\r\n    init: function() {\r\n      this.appendValueInput('FROM')\r\n        .appendField('FROM ')\r\n        .setCheck(['TABLE', 'tablename_as']);\r\n      this.setInputsInline(false);\r\n      this.setPreviousStatement(true, ['SELECT']);\r\n      this.setNextStatement(true, ['WHERE', 'GROUP BY', 'HAVING', 'ORDER BY', 'FROM']);\r\n      this.setColour('#8007f2');\r\n    }\r\n  };\r\n\r\n  // Define the Python generator for the 'select_from' block\r\n  pythonGenerator.forBlock['select_from'] = function(block, generator) {\r\n    var from = pythonGenerator.statementToCode(block, 'FROM');\r\n    from = from.substring(0, from.length);\r\n    return 'FROM ' + from + ' ';\r\n  };\r\n\r\n  // Define the 'select_where' block\r\n  Blockly.Blocks['select_where'] = {\r\n    init: function() {\r\n      this.appendValueInput('whereInput')\r\n        .setCheck(['BETWEEN', 'AND', 'OR', 'COMPARE', 'NULLIFIER', 'INNIFIER', 'NOT', 'freeinput'])\r\n        .appendField(\"WHERE                 \");\r\n      this.setPreviousStatement(true, ['FROM']);\r\n      this.setNextStatement(true, ['WHERE', 'GROUP BY']);\r\n      this.setColour('#8007f2');\r\n      this.setTooltip(\"\");\r\n      this.setHelpUrl(\"\");\r\n    }\r\n  };\r\n\r\n  // Define the Python generator for the 'select_where' block\r\n  pythonGenerator.forBlock['select_where'] = function(block, generator) {\r\n    var code = pythonGenerator.statementToCode(block, 'whereInput');\r\n    return 'WHERE ' + code + ' ';\r\n  };\r\n\r\n  // Define the 'select_groupby' block\r\n  Blockly.Blocks['select_groupby'] = {\r\n    init: function() {\r\n      this.appendValueInput('groupInput')\r\n        .setCheck(['freeinput', \"CONDITIONCHOOSER\"])\r\n        .appendField(\"GROUP BY \");\r\n      this.setPreviousStatement(true, ['WHERE', 'FROM']);\r\n      this.setNextStatement(true, ['GROUP BY', 'HAVING']);\r\n      this.setColour('#8007f2');\r\n      this.setTooltip(\"\");\r\n      this.setHelpUrl(\"\");\r\n    }\r\n  };\r\n\r\n  // Define the Python generator for the 'select_groupby' block\r\n  pythonGenerator.forBlock['select_groupby'] = function(block, generator) {\r\n    var code = pythonGenerator.statementToCode(block, 'groupInput');\r\n    return 'GROUP BY ' + code + ' ';\r\n  };\r\n\r\n  // Define the 'select_having' block\r\n  Blockly.Blocks['select_having'] = {\r\n    init: function() {\r\n      this.appendValueInput('haveInput')\r\n        .setCheck([\"COMPARE\"])\r\n        .appendField(\"HAVING           \");\r\n      this.setPreviousStatement(true, ['GROUP BY']);\r\n      this.setNextStatement(true, ['HAVING', 'ORDER BY']);\r\n      this.setColour('#8007f2');\r\n      this.setTooltip(\"\");\r\n      this.setHelpUrl(\"\");\r\n      this.setInputsInline(true);\r\n    }\r\n  };\r\n\r\n  // Define the Python generator for the 'select_having' block\r\n  pythonGenerator.forBlock['select_having'] = function(block, generator) {\r\n    var code = pythonGenerator.statementToCode(block, 'haveInput');\r\n    return 'HAVING ' + code + ' ';\r\n  };\r\n\r\n  // Define the 'select_orderby' block\r\n  Blockly.Blocks['select_orderby'] = {\r\n    init: function() {\r\n      this.appendValueInput('orderInput')\r\n        .setCheck([\"CONDITIONCHOOSER\", 'aggregate_min', 'aggregate_avg', 'aggregate_max', 'aggregate_sum', 'aggregate_count', 'freeinput'])\r\n        .appendField(\"ORDER BY        \");\r\n      this.setPreviousStatement(true, ['GROUP BY', 'HAVING']);\r\n      this.setNextStatement(true, ['ORDER BY']);\r\n      this.setColour('#8007f2');\r\n      this.setTooltip(\"\");\r\n      this.setHelpUrl(\"\");\r\n    }\r\n  };\r\n\r\n  // Define the Python generator for the 'select_orderby' block\r\n  pythonGenerator.forBlock['select_orderby'] = function(block, generator) {\r\n    var code = pythonGenerator.statementToCode(block, 'orderInput');\r\n    var i = 1;\r\n    var countAdditionalOBs = 1;\r\n    while (block.getInput('OB' + countAdditionalOBs)) {\r\n      countAdditionalOBs++;\r\n    }\r\n    while (i <= countAdditionalOBs) {\r\n      code = code.concat(pythonGenerator.statementToCode(block, 'OB' + i));\r\n      i++;\r\n    }\r\n    code = code.replace(/blank/g, ',');\r\n    code = code.replace(/SC/g, 'SC,');\r\n    code = 'ORDER BY ' + code + ' ';\r\n    code = code.replace(',;', ';');\r\n    return code;\r\n  };\r\n\r\n  // Define the 'all_join' block\r\n  Blockly.Blocks['all_join'] = {\r\n    init: function() {\r\n      this.appendValueInput(\"STATEMENT\")\r\n        .appendField(new Blockly.FieldDropdown([['\\u2009', 'BLANKJ'], ['INNER', 'INNER'], ['LEFT', 'LEFT'], ['RIGHT', 'RIGHT']]), \"chooseTableType\")\r\n        .appendField('JOIN')\r\n        .appendField(new Blockly.FieldDropdown(tableNames), \"chooseTableJoin2\")\r\n        .setCheck(\"COMPARE\")\r\n        .appendField(new Blockly.FieldDropdown([['ON', 'onModifier'], ['\\u2009', 'Blank']]), \"modifierActive\");\r\n      this.setOutput(true, [\"INNER_JOIN\"]);\r\n      this.setColour('#8007f2');\r\n      this.setTooltip(\"\");\r\n      this.setHelpUrl(\"\");\r\n      this.setOnChange(function(changeEvent){\r\n        if(this.getInput(\"STATEMENT\") == null){\r\n          if(this.getFieldValue('modifierActive') !== 'Blank'){\r\n            this.removeInput(\"noSTATEMENT\");\r\n            this.appendValueInput(\"STATEMENT\")\r\n              .appendField(new Blockly.FieldDropdown([['\\u2009', 'BLANKJ'], ['INNER', 'INNER'], ['LEFT', 'LEFT'], ['RIGHT', 'RIGHT']]), \"chooseTableType\")\r\n              .appendField('JOIN')\r\n              .appendField(new Blockly.FieldDropdown(tableNames), \"chooseTableJoin2\")\r\n              .setCheck(\"COMPARE\")\r\n              .appendField(new Blockly.FieldDropdown([['ON', 'onModifier'], ['\\u2009', 'Blank']]), \"modifierActive\");\r\n          }\r\n        } else {\r\n          if(this.getFieldValue('modifierActive') == 'Blank'){\r\n            this.removeInput(\"STATEMENT\");\r\n            this.appendValueInput(\"noSTATEMENT\")\r\n              .appendField(new Blockly.FieldDropdown([['\\u2009', 'BLANKJ'], ['INNER', 'INNER'], ['LEFT', 'LEFT'], ['RIGHT', 'RIGHT']]), \"chooseTableType\")\r\n              .appendField('JOIN')\r\n              .setCheck(\"tablename_as\")\r\n              .appendField(new Blockly.FieldDropdown([['\\u2009', 'Blank'], ['ON', 'onModifier']]), \"modifierActive\");\r\n          }\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  // Define the Python generator for the 'all_join' block\r\n  pythonGenerator.forBlock['all_join'] = function(block, generator) {\r\n    var type = block.getFieldValue('chooseTableType');\r\n    if(type == 'BLANKJ'){\r\n      type = '';\r\n    }\r\n    var join = '';\r\n    var isModifierActive = '';\r\n    var statement = '';\r\n    var nostatement = '';\r\n    if(block.getInput('STATEMENT') != null){\r\n      join = block.getFieldValue('chooseTableJoin2');\r\n      statement = pythonGenerator.statementToCode(block, 'STATEMENT');\r\n    } else {\r\n      nostatement = pythonGenerator.statementToCode(block, 'noSTATEMENT');\r\n    }\r\n    var code = type + ' join' + ' ';\r\n    if(block.getFieldValue('modifierActive') == 'onModifier'){\r\n      if(statement == ''){\r\n        code = code.concat('' + join + ' ' + 'on' + ' ');\r\n      } else {\r\n        code = code.concat('' + join + ' ' + 'on' + statement + ' ');\r\n      }\r\n    } else {\r\n      if(nostatement == ''){\r\n        code = code.concat('' + join + ' ');\r\n      } else {\r\n        code = code.concat('' + join + ' ' + nostatement + ' ');\r\n      }\r\n    }\r\n    return code;\r\n  };\r\n};\r\n\r\ndefineSelectBlocks();\r\n","C:\\Users\\janry\\Music\\VisualQuery\\frontend\\src\\blocks\\tablesAndAttributes.js",["217","218","219"],[],"import * as Blockly from 'blockly/core';\r\nimport 'blockly/blocks';\r\nimport { pythonGenerator } from 'blockly/python';\r\n\r\nconst tables = [\r\n  'Department', \r\n  'Professor', \r\n  'Student', \r\n  'Course', \r\n  'Enrollment', \r\n  'Class'\r\n];\r\n\r\nconst columns = {\r\n  'Department': ['DepartmentID', 'DepartmentName'],\r\n  'Professor': ['ProfessorID', 'FirstName', 'LastName', 'Department'],\r\n  'Student': ['StudentID', 'FirstName', 'LastName', 'EnrollmentDate'],\r\n  'Course': ['CourseID', 'CourseName', 'Department'],\r\n  'Enrollment': ['EnrollmentID', 'Student', 'Course', 'EnrollmentDate'],\r\n  'Class': ['ClassID', 'Course', 'Professor', 'Schedule']\r\n};\r\n\r\nconst fillTables = () => {\r\n  return tables.map(table => [table, table]);\r\n};\r\n\r\nconst fillColumns = (table) => {\r\n  return columns[table].map(column => [column, column]);\r\n};\r\n\r\nconst doesMatch = (selectedTable, correctColumn) => {\r\n  return columns[selectedTable].includes(correctColumn);\r\n};\r\n\r\nexport const defineTableBlocks = () => {\r\n  Blockly.Blocks['allchooser'] = {\r\n    init: function() {\r\n      this.appendDummyInput('allInput')\r\n        .setAlign('CENTRE')\r\n        .appendField(\"*\");\r\n      this.setOutput(true, \"ALL\");\r\n      this.setColour('#f1bf06');\r\n      this.setTooltip(\"\");\r\n      this.setHelpUrl(\"\");\r\n    }\r\n  };\r\n\r\n  pythonGenerator.forBlock['allchooser'] = function(block, generator) {\r\n    return '*';\r\n  };\r\n\r\n  Blockly.Blocks['table'] = {\r\n    init: function() {\r\n      this.appendDummyInput('previousTables')\r\n        .appendField('     ')\r\n        .appendField(new Blockly.FieldDropdown(fillTables()), \"chooseTableT\");\r\n      this.setOutput(true, 'TABLE');\r\n      this.setColour('#f1bf06');\r\n      this.setTooltip(\"Select a table\");\r\n      this.setHelpUrl(\"\");\r\n    }\r\n  };\r\n\r\n  pythonGenerator.forBlock['table'] = function(block, generator) {\r\n    var chosenTableT = block.getFieldValue('chooseTableT');\r\n    return chosenTableT;\r\n  };\r\n\r\n  Blockly.Blocks['conditionchooser'] = {\r\n    init: function() {\r\n      this.appendDummyInput('listInput')\r\n        .appendField(\"     \")\r\n        .appendField(new Blockly.FieldDropdown(fillTables(), this.updateColumns.bind(this)), \"chooseTableC\")\r\n        .appendField('.', \"dot\")\r\n        .appendField(new Blockly.FieldDropdown(fillColumns('Department')), \"chooseColumnC\");\r\n      this.setInputsInline(true);\r\n      this.setOutput(true, 'CONDITIONCHOOSER');\r\n      this.setColour('#f1bf06');\r\n      this.setTooltip(\"Select a table and column\");\r\n      this.setHelpUrl(\"\");\r\n    },\r\n    updateColumns: function(newTable) {\r\n      const columnDropdown = this.getField('chooseColumnC');\r\n      if (columnDropdown) {\r\n        columnDropdown.menuGenerator_ = fillColumns(newTable);\r\n        columnDropdown.setValue(columnDropdown.menuGenerator_[0][1]);\r\n      }\r\n    },\r\n    onchange: function(changeEvent) {\r\n      if (changeEvent && changeEvent.element === 'field' && changeEvent.name === 'chooseTableC') {\r\n        const selectedTable = this.getFieldValue('chooseTableC');\r\n        this.updateColumns(selectedTable);\r\n      }\r\n    }\r\n  };\r\n\r\n  pythonGenerator.forBlock['conditionchooser'] = function(block, generator) {\r\n    var chosenTableC = block.getFieldValue('chooseTableC');\r\n    var chosenColumnC = block.getFieldValue('chooseColumnC');\r\n    var chosenOrderC = '';\r\n    if (block.getInput('listOrder')) {\r\n      chosenOrderC = block.getFieldValue('orderC');\r\n      if (chosenOrderC == 'BLANK') {\r\n        chosenOrderC = '';\r\n      }\r\n    }\r\n    if (chosenColumnC == 'all') {\r\n      chosenColumnC = '*';\r\n    }\r\n    var code = chosenTableC + '.' + chosenColumnC + ' ' + chosenOrderC;\r\n    return code.trim();\r\n  };\r\n};\r\n\r\ndefineTableBlocks();\r\n","C:\\Users\\janry\\Music\\VisualQuery\\frontend\\src\\blocks\\aliases.js",[],[],"C:\\Users\\janry\\Music\\VisualQuery\\frontend\\src\\blocks\\logicalOperators.js",["220","221"],[],"import * as Blockly from 'blockly/core';\r\nimport 'blockly/blocks';\r\nimport { pythonGenerator } from 'blockly/python';\r\n\r\nexport const defineLogicalOperatorBlocks = () => {\r\n  Blockly.defineBlocksWithJsonArray([\r\n    {\r\n      \"type\": \"not\",\r\n      \"message0\": \"NOT %1\",\r\n      \"args0\": [\r\n        {\r\n          \"type\": \"input_value\",\r\n          \"name\": \"Con0\",\r\n          \"check\": [\"OR\", \"AND\", 'COMPARE', 'BETWEEN']\r\n        }\r\n      ],\r\n      \"output\": \"NOT\",\r\n      \"colour\": '#5270DE',\r\n      \"tooltip\": \"\",\r\n      \"helpUrl\": \"\"\r\n    }\r\n  ]);\r\n\r\n  pythonGenerator.forBlock['not'] = function(block, generator) {\r\n    var code = 'NOT ' + pythonGenerator.statementToCode(block, 'Con0');\r\n    return code;\r\n  };\r\n\r\n  Blockly.defineBlocksWithJsonArray([\r\n    {\r\n      \"type\": \"and\",\r\n      \"message0\": \"AND %1\",\r\n      \"args0\": [\r\n        {\r\n          \"type\": \"input_value\",\r\n          \"name\": \"Con0\",\r\n          \"check\": [\"Number\", \"COMPARE\", \"NULLIFIER\", \"INNIFIER\", \"OR\", 'NOT', 'AND', 'BETWEEN']\r\n        }\r\n      ],\r\n      \"message1\": \"    %1\",\r\n      \"args1\": [\r\n        {\r\n          \"type\": \"input_value\",\r\n          \"name\": \"sCon0\",\r\n          \"check\": [\"Number\", \"COMPARE\", \"NULLIFIER\", \"INNIFIER\", \"OR\", 'NOT', 'AND', 'BETWEEN']\r\n        }\r\n      ],\r\n      \"output\": \"AND\",\r\n      \"colour\": '#5270DE',\r\n      \"tooltip\": \"\",\r\n      \"helpUrl\": \"\"\r\n    }\r\n  ]);\r\n\r\n  pythonGenerator.forBlock['and'] = function(block, generator) {\r\n    var argument0 = pythonGenerator.statementToCode(block, 'Con0');\r\n    var argument1 = pythonGenerator.statementToCode(block, 'sCon0');\r\n    var n = 1;\r\n    var code = argument0 + ' AND ' + argument1 + ' ';\r\n    while (block.getInput('Con' + n)) {\r\n      var additionalCode = pythonGenerator.statementToCode(block, 'Con' + n);\r\n      code = code.concat('AND ' + additionalCode);\r\n      ++n;\r\n    }\r\n    code = '(' + code + ')';\r\n    return code;\r\n  };\r\n\r\n  Blockly.defineBlocksWithJsonArray([\r\n    {\r\n      \"type\": \"or\",\r\n      \"message0\": \"OR %1\",\r\n      \"args0\": [\r\n        {\r\n          \"type\": \"input_value\",\r\n          \"name\": \"Con0\",\r\n          \"check\": [\"COMPARE\", \"NULLIFIER\", \"INNIFIER\", \"AND\", 'NOT', 'OR', 'BETWEEN']\r\n        }\r\n      ],\r\n      \"message1\": \"    %1\",\r\n      \"args1\": [\r\n        {\r\n          \"type\": \"input_value\",\r\n          \"name\": \"sCon0\",\r\n          \"check\": [\"COMPARE\", \"NULLIFIER\", \"INNIFIER\", \"AND\", 'NOT', 'OR', 'BETWEEN']\r\n        }\r\n      ],\r\n      \"output\": \"OR\",\r\n      \"colour\": '#5270DE',\r\n      \"tooltip\": \"\",\r\n      \"helpUrl\": \"\"\r\n    }\r\n  ]);\r\n\r\n  pythonGenerator.forBlock['or'] = function(block, generator) {\r\n    var argument0 = pythonGenerator.statementToCode(block, 'Con0');\r\n    var argument1 = pythonGenerator.statementToCode(block, 'sCon0');\r\n    var n = 1;\r\n    var code = argument0 + ' OR ' + argument1 + ' ';\r\n    while (block.getInput('Con' + n)) {\r\n      var additionalCode = pythonGenerator.statementToCode(block, 'Con' + n);\r\n      code = code.concat('OR ' + additionalCode);\r\n      ++n;\r\n    }\r\n    code = '(' + code + ')';\r\n    return code;\r\n  };\r\n\r\n  Blockly.defineBlocksWithJsonArray([\r\n    {\r\n      \"type\": \"between\",\r\n      \"message0\": \"    %1\",\r\n      \"args0\": [\r\n        {\r\n          \"type\": \"input_value\",\r\n          \"name\": \"Con0\",\r\n          \"check\": ['CONDITIONCHOOSER', 'freeinput']\r\n        }\r\n      ],\r\n      \"message1\": \"BETWEEN %1\",\r\n      \"args1\": [\r\n        {\r\n          \"type\": \"input_value\",\r\n          \"name\": \"Con1\",\r\n          \"check\": ['AND']\r\n        }\r\n      ],\r\n      \"output\": \"BETWEEN\",\r\n      \"colour\": '#5270DE',\r\n      \"tooltip\": \"\",\r\n      \"helpUrl\": \"\"\r\n    }\r\n  ]);\r\n\r\n  pythonGenerator.forBlock['between'] = function(block, generator) {\r\n    var argument0 = pythonGenerator.statementToCode(block, 'Con0');\r\n    var argument1 = pythonGenerator.statementToCode(block, 'Con1');\r\n    var code = argument0 + ' BETWEEN ' + argument1;\r\n    code = code.replace('(', '');\r\n    code = code.replace(')', '');\r\n    return code;\r\n  };\r\n\r\n  Blockly.defineBlocksWithJsonArray([{\r\n    \"type\": \"innifier\",\r\n    \"message0\": \"%1 %2 %3\",\r\n    \"args0\": [\r\n      {\r\n        \"type\": \"input_value\",\r\n        \"name\": \"1ConditionC\",\r\n        \"check\": [\"MATH\", \"CONDITIONCHOOSER\", 'freeinput'],\r\n      },\r\n      {\r\n        \"type\": \"field_dropdown\",\r\n        \"name\": \"OP\",\r\n        \"options\": [\r\n          [\"IN\", \"I\"],\r\n          [\"NOT IN\", \"NI\"],\r\n        ]\r\n      },\r\n      {\r\n        \"type\": \"input_statement\",\r\n        \"name\": \"2ConditionC\",\r\n        \"check\": [\"SELECT\"],\r\n      },\r\n    ],\r\n    \"inputsInline\": true,\r\n    \"output\": \"INNIFIER\",\r\n    \"colour\": '#5270DE',\r\n    \"tooltip\": \"\",\r\n    \"helpUrl\": \"\"\r\n  }]);\r\n\r\n  pythonGenerator.forBlock['innifier'] = function(block, generator) {\r\n    var OPERATORS = {\r\n      'I': 'IN',\r\n      'NI': 'NOT IN'\r\n    };\r\n    var operator = OPERATORS[block.getFieldValue('OP')];\r\n    var argument0 = pythonGenerator.statementToCode(block, '1ConditionC');\r\n    var argument1 = pythonGenerator.statementToCode(block, '2ConditionC');\r\n    if (operator == 'IN' || operator == 'NOT IN') {\r\n      if (argument1.includes(';')) {\r\n        if (argument1.includes(';SELECT')) {\r\n          argument1 = argument1.replace(/;SELECT/g, '<BR> union <BR>select');\r\n        }\r\n        argument1 = argument1.replace(/;/g, ' ');\r\n      }\r\n      argument1 = '(' + argument1 + ')';\r\n    }\r\n    var code = argument0 + ' ' + operator + ' ' + argument1;\r\n    return code;\r\n  };\r\n};\r\n\r\ndefineLogicalOperatorBlocks();\r\n","C:\\Users\\janry\\Music\\VisualQuery\\frontend\\src\\blocks\\mathematicalOperators.js",["222","223","224","225"],[],"import * as Blockly from 'blockly/core';\r\nimport 'blockly/blocks';\r\nimport { pythonGenerator } from 'blockly/python';\r\n\r\nexport const defineMathematicalOperatorBlocks = () => {\r\n  Blockly.defineBlocksWithJsonArray([\r\n    {\r\n      \"type\": \"compare\",\r\n      \"message0\": \"%1 %2 %3\",\r\n      \"args0\": [\r\n        {\r\n          \"type\": \"input_value\",\r\n          \"name\": \"1ConditionC\",\r\n          \"check\": [\"DatePicker\", \"MATH\", \"CONDITIONCHOOSER\", 'HAVING', 'Boolean', 'Number', 'freeinput', 'aggregate_min', 'aggregate_avg', 'aggregate_max', 'aggregate_sum', 'aggregate_count', 'datepicker']\r\n        },\r\n        {\r\n          \"type\": \"field_dropdown\",\r\n          \"name\": \"OP\",\r\n          \"options\": [\r\n            [\"=\", \"EQ\"],\r\n            [\"\\u2260\", \"NEQ\"],\r\n            [\"<\", \"LT\"],\r\n            [\"\\u2264\", \"LTE\"],\r\n            [\">\", \"GT\"],\r\n            [\"\\u2265\", \"GTE\"],\r\n            [\"LIKE\", 'L']\r\n          ]\r\n        },\r\n        {\r\n          \"type\": \"input_value\",\r\n          \"name\": \"2ConditionC\",\r\n          \"check\": [\"DatePicker\", \"MATH\", \"CONDITIONCHOOSER\", 'Boolean', 'Number', 'freeinput', 'aggregate_min', 'aggregate_avg', 'aggregate_max', 'aggregate_sum', 'aggregate_count', 'datepicker']\r\n        }\r\n      ],\r\n      \"inputsInline\": true,\r\n      \"output\": \"COMPARE\",\r\n      \"colour\": '#3ED9D9',\r\n      \"tooltip\": \"\",\r\n      \"helpUrl\": \"\"\r\n    },\r\n    {\r\n      \"type\": \"compareDerived\",\r\n      \"message0\": \"%1    %2 %3\",\r\n      \"args0\": [\r\n        {\r\n          \"type\": \"input_value\",\r\n          \"name\": \"1ConditionCD\",\r\n          \"check\": ['aggregate_AVG', 'aggregate_COUNT', 'aggregate_MAX', 'aggregate_MIN', 'aggregate_SUM', 'CONDITIONCHOOSER']\r\n        },\r\n        {\r\n          \"type\": \"field_dropdown\",\r\n          \"name\": \"OP\",\r\n          \"options\": [\r\n            [\"=\", \"EQ\"],\r\n            [\"\\u2260\", \"NEQ\"],\r\n            [\"<\", \"LT\"],\r\n            [\"\\u2264\", \"LTE\"],\r\n            [\">\", \"GT\"],\r\n            [\"\\u2265\", \"GTE\"]\r\n          ]\r\n        },\r\n        {\r\n          \"type\": \"input_value\",\r\n          \"name\": \"2ConditionCD\",\r\n          \"check\": [\"MATH\", \"CONDITIONCHOOSER\", 'Boolean', 'Number', 'freeinput']\r\n        }\r\n      ],\r\n      \"output\": 'DERIVED',\r\n      \"colour\": 180,\r\n      \"tooltip\": \"%{BKY_LOGIC_COMPARE_HELPURL}\",\r\n      \"extensions\": [\"logic_compare\", \"logic_op_tooltip\"]\r\n    }\r\n  ]);\r\n\r\n  pythonGenerator.forBlock['compare'] = function(block, generator) {\r\n    var OPERATORS = {\r\n      'EQ': '=',\r\n      'NEQ': '!=',\r\n      'LT': '<',\r\n      'LTE': '<=',\r\n      'GT': '>',\r\n      'GTE': '>=',\r\n      'IN': 'IS NULL',\r\n      'INN': 'IS NOT NULL',\r\n      'I': 'IN',\r\n      'NI': 'NOT IN',\r\n      'L': 'LIKE'\r\n    };\r\n    var operator = OPERATORS[block.getFieldValue('OP')];\r\n    var argument0 = pythonGenerator.statementToCode(block, '1ConditionC');\r\n    var argument1 = '';\r\n    if (operator != 'IS NULL' && operator != 'IS NOT NULL') {\r\n      argument1 = pythonGenerator.statementToCode(block, '2ConditionC');\r\n      if (operator == 'IN' || operator == 'NOT IN') {\r\n        if (argument1.includes(';')) {\r\n          if (argument1.includes(';SELECT')) {\r\n            argument1 = argument1.replace(/;SELECT/g, '<BR> union <BR>select');\r\n          }\r\n          argument1 = argument1.replace(';', ' ');\r\n        }\r\n        argument1 = '(' + argument1 + ')';\r\n      }\r\n    }\r\n    var code = argument0 + ' ' + operator + ' ' + argument1;\r\n    return code;\r\n  };\r\n\r\n  pythonGenerator.forBlock['compareDerived'] = function(block, generator) {\r\n    var OPERATORS = {\r\n      'EQ': '=',\r\n      'NEQ': '!=',\r\n      'LT': '<',\r\n      'LTE': '<=',\r\n      'GT': '>',\r\n      'GTE': '>='\r\n    };\r\n    var operator = OPERATORS[block.getFieldValue('OP')];\r\n    var argument0 = pythonGenerator.statementToCode(block, '1ConditionCD');\r\n    var argument1 = pythonGenerator.statementToCode(block, '2ConditionCD');\r\n    var code = argument0 + ' ' + operator + ' ' + argument1;\r\n    return code;\r\n  };\r\n\r\n  Blockly.Blocks['math'] = {\r\n    init: function() {\r\n      this.appendValueInput(\"1ConditionM\")\r\n        .setCheck([\"freeinput\", \"CONDITIONCHOOSER\", \"Number\", 'MATH'])\r\n        .setAlign('CENTRE');\r\n      this.appendValueInput(\"2ConditionM\")\r\n        .setCheck([\"freeinput\", \"CONDITIONCHOOSER\", \"Number\", 'MATH'])\r\n        .setAlign('CENTRE')\r\n        .appendField(new Blockly.FieldDropdown([[\"\\u002B\", \"plus\"], [\"\\u002D\", \"minus\"], [\"\\u00D7\", \"mul\"], [\"\\u00F7\", \"div\"]]), \"mathemator\");\r\n      this.setInputsInline(true);\r\n      this.setOutput(true, [\"MATH\"]);\r\n      this.setColour('#5BE5E5');\r\n      this.setTooltip(\"\");\r\n      this.setHelpUrl(\"\");\r\n    }\r\n  };\r\n\r\n  pythonGenerator.forBlock['math'] = function(block, generator) {\r\n    var OPERATORS = {\r\n      'plus': '+',\r\n      'minus': '-',\r\n      'mul': '*',\r\n      'div': '/'\r\n    };\r\n    var operator = OPERATORS[block.getFieldValue('mathemator')];\r\n    var argument0 = pythonGenerator.statementToCode(block, '1ConditionM').trim();\r\n    var argument1 = pythonGenerator.statementToCode(block, '2ConditionM');\r\n    var code = '(' + argument0 + ' ' + operator + ' ' + argument1 + ')';\r\n    return code;\r\n  };\r\n};\r\n\r\ndefineMathematicalOperatorBlocks();\r\n","C:\\Users\\janry\\Music\\VisualQuery\\frontend\\src\\blocks\\valueInputs.js",["226","227","228","229"],[],"import * as Blockly from 'blockly/core';\r\nimport 'blockly/blocks';\r\nimport { pythonGenerator } from 'blockly/python';\r\n\r\nexport const defineValueInputBlocks = () => {\r\n  Blockly.Blocks['freeinput'] = {\r\n    init: function() {\r\n      this.appendDummyInput()\r\n        .appendField(\"\\u201C\")\r\n        .appendField(new Blockly.FieldTextInput(\"\\u2009\"), \"textInput\")\r\n        .appendField(\"\\u201D\");\r\n      this.setOutput(true, \"freeinput\");\r\n      this.setColour('#FC4758');\r\n      this.setInputsInline(true);\r\n      this.setTooltip(\"\");\r\n      this.setHelpUrl(\"\");\r\n      this.setOnChange(function(changeEvent){\r\n        var parent = this.getSurroundParent();\r\n        if(parent != null && parent.toString().includes('ORDER BY') && (this.getField('orderfI') == null)){\r\n          this.appendDummyInput('listOrder').appendField(\" \").appendField(new Blockly.FieldDropdown([[\"\\u2009\",\"BLANK\"], [\"ASC\",\"ASC\"], [\"DESC\",\"DESC\"]]), \"orderfI\");\r\n        }\r\n        else if((parent == null || (!(parent.toString().includes('ORDER BY')))) && this.getField('orderfI') != null){\r\n          this.removeInput('listOrder');\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  pythonGenerator.forBlock['freeinput'] = function(block, generator) {\r\n    var code = \"\\\"\" + (block.getFieldValue('textInput')) + \"\\\"\";\r\n    if(code.match(/create/i) || code.match(/alter/i) || code.match(/index/i) || code.match(/drop/i) || code.match(/show/i) || code.match(/execute/i) || code.match(/insert/i) || code.match(/update/i) || code.match(/delete/i) || code.match(/file/i) || code.match(/grant/i) || code.match(/process/i) || code.match(/shutdown/i) || code.match(/reload/i) || code.match(/lock/i) || code.match(/replication/i)){\r\n      code = '';\r\n    }\r\n    if(code.match(/Ä/g)){\r\n      code = code.replace(/Ä/g, 'Ae');\r\n    }\r\n    if(code.match(/ä/g)){\r\n      code = code.replace(/ä/g, 'ae');\r\n    }\r\n    if(code.match(/Ö/g)){\r\n      code = code.replace(/Ö/g, 'Oe');\r\n    }\r\n    if(code.match(/ö/g)){\r\n      code = code.replace(/ö/g, 'oe');\r\n    }\r\n    if(code.match(/Ü/g)){\r\n      code = code.replace(/Ü/g, 'Ue');\r\n    }\r\n    if(code.match(/ü/g)){\r\n      code = code.replace(/ü/g, 'ue');\r\n    }\r\n    var countEscape1 = (code.match(/\"/g) || []).length;\r\n    var countEscape2 = (code.match(/'/g) || []).length;\r\n    if(countEscape1%2 != 0 || countEscape2%2 != 0 || code.includes('\\u005C') || code.includes('\\u002F')){\r\n      code = '';\r\n    }\r\n\r\n    var chosenOrderfI = '';\r\n    if(this.getInput('listOrder')){\r\n      chosenOrderfI = pythonGenerator.variableDB_.getName(block.getFieldValue('orderfI'));\r\n      if(chosenOrderfI == 'BLANK'){\r\n        chosenOrderfI = '';\r\n      }\r\n      else{\r\n        code = code + ' ' + chosenOrderfI;\r\n      }\r\n    }\r\n\r\n    return code;\r\n  };\r\n\r\n  Blockly.defineBlocksWithJsonArray([\r\n    {\r\n      \"type\": \"boolean\",\r\n      \"message0\": \"%1\",\r\n      \"args0\": [\r\n        {\r\n          \"type\": \"field_dropdown\",\r\n          \"name\": \"BOOL\",\r\n          \"options\": [\r\n            [\"true\", \"TRUE\"],\r\n            [\"false\", \"FALSE\"]\r\n          ]\r\n        }\r\n      ],\r\n      \"output\": \"Boolean\",\r\n      \"colour\": '#FC4758',\r\n      \"tooltip\": \"\",\r\n      \"helpUrl\": \"\"\r\n    }\r\n  ]);\r\n\r\n  pythonGenerator.forBlock['boolean'] = function(block, generator) {\r\n    var code = (block.getFieldValue('BOOL') == 'TRUE') ? 'true' : 'false';\r\n    code = '' + code;\r\n    return code;\r\n  };\r\n\r\n  Blockly.Blocks['datepicker'] = {\r\n    init: function() {\r\n      this.appendDummyInput()\r\n        .appendField(\"Year:\")\r\n        .appendField(new Blockly.FieldNumber(2018), \"date_year\");\r\n      this.appendDummyInput()\r\n        .appendField(\"Month:\")\r\n        .appendField(new Blockly.FieldNumber(0, 1, 12), \"date_month\");\r\n      this.appendDummyInput()\r\n        .appendField(\"Day:\")\r\n        .appendField(new Blockly.FieldNumber(0, 1, 31), \"date_day\");\r\n      this.appendDummyInput()\r\n        .appendField(\"Hour:\")\r\n        .appendField(new Blockly.FieldNumber(0, 0, 23), \"date_time\");\r\n      this.setInputsInline(true);\r\n      this.setOutput(true, \"DatePicker\");\r\n      this.setColour('#FC4758');\r\n      this.setTooltip(\"\");\r\n      this.setHelpUrl(\"\");\r\n    }\r\n  };\r\n\r\n  pythonGenerator.forBlock['datepicker'] = function(block, generator) {\r\n    var year = parseFloat(block.getFieldValue('date_year'));\r\n    var month = parseFloat(block.getFieldValue('date_month'));\r\n    var day = parseFloat(block.getFieldValue('date_day'));\r\n    var time = parseFloat(block.getFieldValue('date_time'));\r\n    if(month < 10){\r\n      month = '0' + month;\r\n    }\r\n    if(day < 10){\r\n      day = '0' + day;\r\n    }\r\n    if(time < 10){\r\n      time = '0' + time;\r\n    }\r\n    time = time + '00';\r\n    var code = '\\u0022' + year + month + day + time + '\\u0022';\r\n    return code;\r\n  };\r\n\r\n  Blockly.defineBlocksWithJsonArray([\r\n    {\r\n      \"type\": \"number\",\r\n      \"message0\": \"%1\",\r\n      \"args0\": [{\r\n        \"type\": \"field_number\",\r\n        \"name\": \"NUM\",\r\n        \"value\": 0\r\n      }],\r\n      \"output\": \"Number\",\r\n      \"colour\": '#FC4758',\r\n      \"helpUrl\": \"%{BKY_MATH_NUMBER_HELPURL}\",\r\n      \"tooltip\": \"%{BKY_MATH_NUMBER_TOOLTIP}\",\r\n      \"extensions\": [\"parent_tooltip_when_inline\"]\r\n    }\r\n  ]);\r\n\r\n  pythonGenerator.forBlock['number'] = function(block, generator) {\r\n    var code = parseFloat(block.getFieldValue('NUM'));\r\n    code = '' + code;\r\n    return code;\r\n  };\r\n};\r\n\r\ndefineValueInputBlocks();\r\n","C:\\Users\\janry\\Music\\VisualQuery\\frontend\\src\\blocks\\aggregateBlocks.js",["230","231","232","233","234"],[],"import * as Blockly from 'blockly/core';\r\nimport 'blockly/blocks';\r\nimport { pythonGenerator } from 'blockly/python';\r\n\r\nexport const defineAggregateBlocks = () => {\r\n  Blockly.defineBlocksWithJsonArray([\r\n    {\r\n      \"type\": \"aggregate_min\",\r\n      \"message0\": \"MIN %1\",\r\n      \"args0\": [\r\n        {\r\n          \"type\": \"input_value\",\r\n          \"name\": \"min\",\r\n          \"check\": [\"CONDITIONCHOOSER\", 'freeinput']\r\n        },\r\n      ],\r\n      \"inputsInline\": true,\r\n      \"output\": 'aggregate_min',\r\n      \"colour\": '#C440C4',\r\n      \"tooltip\": \"\",\r\n      \"helpUrl\": \"\",\r\n      \"extensions\": 'aggregate_Extensions'\r\n    },\r\n    {\r\n      \"type\": \"aggregate_avg\",\r\n      \"message0\": \"AVG %1\",\r\n      \"args0\": [\r\n        {\r\n          \"type\": \"input_value\",\r\n          \"name\": \"avg\",\r\n          \"check\": [\"CONDITIONCHOOSER\", 'freeinput']\r\n        }\r\n      ],\r\n      \"inputsInline\": true,\r\n      \"output\": 'aggregate_avg',\r\n      \"colour\": '#C440C4',\r\n      \"tooltip\": \"\",\r\n      \"helpUrl\": \"\",\r\n      \"extensions\": 'aggregate_Extensions'\r\n    },\r\n    {\r\n      \"type\": \"aggregate_max\",\r\n      \"message0\": \"MAX %1\",\r\n      \"args0\": [\r\n        {\r\n          \"type\": \"input_value\",\r\n          \"name\": \"max\",\r\n          \"check\": [\"CONDITIONCHOOSER\", 'freeinput']\r\n        }\r\n      ],\r\n      \"inputsInline\": true,\r\n      \"output\": 'aggregate_max',\r\n      \"colour\": '#C440C4',\r\n      \"tooltip\": \"\",\r\n      \"helpUrl\": \"\",\r\n      \"extensions\": 'aggregate_Extensions'\r\n    },\r\n    {\r\n      \"type\": \"aggregate_sum\",\r\n      \"message0\": \"SUM %1\",\r\n      \"args0\": [\r\n        {\r\n          \"type\": \"input_value\",\r\n          \"name\": \"sum\",\r\n          \"check\": [\"CONDITIONCHOOSER\", 'freeinput', 'MATH']\r\n        }\r\n      ],\r\n      \"inputsInline\": true,\r\n      \"output\": 'aggregate_sum',\r\n      \"colour\": '#C440C4',\r\n      \"tooltip\": \"\",\r\n      \"helpUrl\": \"\",\r\n      \"extensions\": 'aggregate_Extensions'\r\n    },\r\n    {\r\n      \"type\": \"aggregate_count\",\r\n      \"message0\": \"COUNT %1\",\r\n      \"args0\": [\r\n        {\r\n          \"type\": \"input_value\",\r\n          \"name\": \"count\",\r\n          \"check\": [\"CONDITIONCHOOSER\", 'freeinput']\r\n        }\r\n      ],\r\n      \"inputsInline\": true,\r\n      \"output\": 'aggregate_count',\r\n      \"colour\": '#C440C4',\r\n      \"tooltip\": \"\",\r\n      \"helpUrl\": \"\",\r\n      \"extensions\": 'aggregate_Extensions'\r\n    }\r\n  ]);\r\n\r\n  if (!Blockly.Extensions.isRegistered('aggregate_Extensions')) {\r\n    Blockly.Extensions.register('aggregate_Extensions', function() {\r\n      this.setOnChange(function(changeEvent) {\r\n        var parent = this.getSurroundParent();\r\n        if (parent != null && parent.toString().includes('ORDER BY') && (this.getField('orderA') == null)) {\r\n          this.appendDummyInput('listOrder').appendField(\" \").appendField(new Blockly.FieldDropdown([[\"\\u2009\",\"BLANK\"], [\"ASC\",\"ASC\"], [\"DESC\",\"DESC\"]]), \"orderA\");\r\n        } else if ((parent == null || (!(parent.toString().includes('ORDER BY')))) && this.getField('orderA') != null) {\r\n          this.removeInput('listOrder');\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  pythonGenerator.forBlock['aggregate_min'] = function(block, generator) {\r\n    var argument = pythonGenerator.statementToCode(block, 'min');\r\n    argument = argument.trim();\r\n    var code = 'MIN(' + argument + ')';\r\n\r\n    if (block.getInput('listOrder')) {\r\n      var chosenOrderA = pythonGenerator.variableDB_.getName(block.getFieldValue('orderA'));\r\n      if (chosenOrderA != 'BLANK') {\r\n        code = code.concat(' ' + chosenOrderA);\r\n      }\r\n    }\r\n    return code;\r\n  };\r\n\r\n  pythonGenerator.forBlock['aggregate_avg'] = function(block, generator) {\r\n    var argument = pythonGenerator.statementToCode(block, 'avg');\r\n    argument = argument.trim();\r\n    var code = 'AVG(' + argument + ')';\r\n\r\n    if (block.getInput('listOrder')) {\r\n      var chosenOrderA = pythonGenerator.variableDB_.getName(block.getFieldValue('orderA'));\r\n      if (chosenOrderA != 'BLANK') {\r\n        code = code.concat(' ' + chosenOrderA);\r\n      }\r\n    }\r\n    return code;\r\n  };\r\n\r\n  pythonGenerator.forBlock['aggregate_max'] = function(block, generator) {\r\n    var argument = pythonGenerator.statementToCode(block, 'max');\r\n    argument = argument.trim();\r\n    var code = 'MAX(' + argument + ')';\r\n\r\n    if (block.getInput('listOrder')) {\r\n      var chosenOrderA = pythonGenerator.variableDB_.getName(block.getFieldValue('orderA'));\r\n      if (chosenOrderA != 'BLANK') {\r\n        code = code.concat(' ' + chosenOrderA);\r\n      }\r\n    }\r\n    return code;\r\n  };\r\n\r\n  pythonGenerator.forBlock['aggregate_sum'] = function(block, generator) {\r\n    var argument = pythonGenerator.statementToCode(block, 'sum');\r\n    argument = argument.trim();\r\n    var code = 'SUM(' + argument + ')';\r\n\r\n    if (block.getInput('listOrder')) {\r\n      var chosenOrderA = pythonGenerator.variableDB_.getName(block.getFieldValue('orderA'));\r\n      if (chosenOrderA != 'BLANK') {\r\n        code = code.concat(' ' + chosenOrderA);\r\n      }\r\n    }\r\n    return code;\r\n  };\r\n\r\n  pythonGenerator.forBlock['aggregate_count'] = function(block, generator) {\r\n    var argument = pythonGenerator.statementToCode(block, 'count');\r\n    argument = argument.trim();\r\n    var code = 'COUNT(' + argument + ')';\r\n\r\n    if (block.getInput('listOrder')) {\r\n      var chosenOrderA = pythonGenerator.variableDB_.getName(block.getFieldValue('orderA'));\r\n      if (chosenOrderA != 'BLANK') {\r\n        code = code.concat(' ' + chosenOrderA);\r\n      }\r\n    }\r\n    return code;\r\n  };\r\n};\r\n\r\ndefineAggregateBlocks();\r\n","C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\index.js",[],[],[],"C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\App.js",["235","236"],[],"C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\component\\Homepage.js",[],[],"C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\utils\\PrivateRoute.js",[],[],"C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\context\\AuthContext.js",[],[],"C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\component\\Dashboard.js",[],[],"C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\component\\AuthPage.js",[],[],"C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\component\\Quizcomp.js",[],[],"C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\component\\Visprogpage.js",[],[],"C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\component\\Navbar.js",["237"],[],"import { useContext } from 'react';\r\nimport jwt_decode from 'jwt-decode';\r\nimport AuthContext from '../context/AuthContext';\r\nimport { Link } from 'react-router-dom';\r\nimport { FaUserCircle } from 'react-icons/fa';\r\n\r\nfunction Navbar() {\r\n  const { user, logoutUser } = useContext(AuthContext);\r\n  const token = localStorage.getItem('authTokens');\r\n\r\n  let user_id;\r\n  if (token) {\r\n    const decoded = jwt_decode(token);\r\n    user_id = decoded.user_id;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <nav className=\"navbar navbar-expand-lg fixed-top navbar-light\" style={{ backgroundColor: \"#FFFFFF\" }}>\r\n        <div className=\"container-fluid\">\r\n          <Link className=\"navbar-brand\" to={token ? \"/dashboard\" : \"/\"}>\r\n            <img style={{ width: '80px', padding: '6px' }} src=\"https://i.imgur.com/juL1aAc.png\" alt=\"\" />\r\n          </Link>\r\n          <button \r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarNav\"\r\n            aria-controls=\"navbarNav\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n            <ul className=\"navbar-nav\">\r\n              {token !== null && (\r\n                <>\r\n                  <li className=\"nav-item\">\r\n                    <Link className=\"nav-link font-weight-bold\" to=\"/dashboard\">Dashboard</Link>\r\n                  </li>\r\n\r\n                  <li className=\"nav-item\">\r\n                    <Link className=\"nav-link font-weight-bold\" to=\"/quizcomp\">Problem-Solving</Link>\r\n                  </li>\r\n\r\n                  <li className=\"nav-item\">\r\n                    <Link className=\"nav-link font-weight-bold\" to=\"/modules\">Modules</Link>\r\n                  </li>\r\n\r\n                  <li className=\"nav-item\">\r\n                    <Link className=\"nav-link font-weight-bold\" to=\"/visprogpage\">Visual Programming</Link>\r\n                  </li>\r\n\r\n                </>\r\n              )}\r\n            </ul>\r\n\r\n            {token !== null && (\r\n              <ul className=\"navbar-nav ml-auto\">\r\n                <li className=\"nav-item dropdown\">\r\n                  <div className=\"nav-link dropdown-toggle\" id=\"userDropdown\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                    <FaUserCircle />\r\n                  </div>\r\n                  <ul className=\"dropdown-menu\" aria-labelledby=\"userDropdown\">\r\n                    <li><span className=\"dropdown-item\">{user ? user.name : ''}</span></li>\r\n                    <li><span className=\"dropdown-item\" onClick={logoutUser}>Logout</span></li>\r\n                  </ul>\r\n                </li>\r\n              </ul>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\component\\RealTimePessimism.js",["238"],[],"  import React, { useEffect, useState, useContext } from 'react';\r\n  import AuthContext from '../context/AuthContext';\r\n  import EmotionDetection from './EmotionDetection';\r\n\r\n  const RealTimePessimism = ({ interactionType, attempts, errors, correct }) => {\r\n    const { authTokens } = useContext(AuthContext);\r\n    const [pessimismLevel, setPessimismLevel] = useState(null);\r\n    const [emotion, setEmotion] = useState('');\r\n    const [headpose, setHeadPose] = useState('');\r\n\r\n    useEffect(() => {\r\n      const socket = new WebSocket('ws://localhost:8000/ws/pessimism_detection/');\r\n\r\n      socket.onopen = () => {\r\n        console.log('WebSocket connected');\r\n      };\r\n\r\n      socket.onmessage = (event) => {\r\n        const data = JSON.parse(event.data);\r\n        setPessimismLevel(data.pessimism_level);\r\n      };\r\n\r\n      socket.onclose = () => {\r\n        console.log('WebSocket disconnected');\r\n      };\r\n\r\n      const sendData = () => {\r\n        if (socket.readyState === WebSocket.OPEN) {\r\n          const interactionData = {\r\n            token: authTokens.access,\r\n            interaction_type: interactionType,\r\n            attempts: attempts,\r\n            errors: errors,\r\n            correct: correct,\r\n            emotion: emotion,\r\n            head_pose: headpose,\r\n          };  \r\n          socket.send(JSON.stringify(interactionData));\r\n        }\r\n      };\r\n\r\n      const intervalId = setInterval(sendData, 5000); // Send data every 5 seconds\r\n\r\n      return () => {\r\n        clearInterval(intervalId);\r\n        socket.close();\r\n      };\r\n    }, [authTokens, interactionType, attempts, errors, correct, emotion, headpose]);\r\n\r\n    return (\r\n      <div>\r\n        <EmotionDetection setEmotion={setEmotion} setHeadPoseClassification={setHeadPose} />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  export default RealTimePessimism;\r\n","C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\component\\Modules.js",["239","240","241","242"],[],"C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\component\\Components.js",[],[],"C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\component\\VisualProgramming.js",["243","244"],[],"C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\component\\Quizpage.js",[],[],"C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\component\\Button.js",[],[],"C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\component\\EmotionDetection.js",["245"],[],"import React, { useEffect, useRef } from 'react';\r\nimport * as faceapi from 'face-api.js';\r\nimport './MainContent.css';  // Ensure you import your CSS file\r\n\r\nconst EmotionDetection = ({ setEmotion, setHeadPoseClassification }) => {\r\n  const videoRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const loadModels = async () => {\r\n      try {\r\n        await faceapi.nets.tinyFaceDetector.loadFromUri('https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/weights/tiny_face_detector_model-weights_manifest.json');\r\n        await faceapi.nets.faceLandmark68Net.loadFromUri('https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/weights/face_landmark_68_model-weights_manifest.json');\r\n        await faceapi.nets.faceRecognitionNet.loadFromUri('https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/weights/face_recognition_model-weights_manifest.json');\r\n        await faceapi.nets.faceExpressionNet.loadFromUri('https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/weights/face_expression_model-weights_manifest.json');\r\n        console.log('Models loaded successfully');\r\n        startVideo();\r\n      } catch (error) {\r\n        console.error('Error loading models:', error);\r\n      }\r\n    };\r\n\r\n    const startVideo = () => {\r\n      navigator.mediaDevices.getUserMedia({ video: {} })\r\n        .then(stream => {\r\n          if (videoRef.current) {\r\n            videoRef.current.srcObject = stream;\r\n            console.log('Video stream started');\r\n          } else {\r\n            console.error('Video reference is not available');\r\n          }\r\n        })\r\n        .catch(err => {\r\n          console.error('Error accessing webcam:', err);\r\n        });\r\n    };\r\n\r\n    const estimateHeadPose = (landmarks) => {\r\n      const eyeLeft = landmarks.getLeftEye();\r\n      const eyeRight = landmarks.getRightEye();\r\n      const nose = landmarks.getNose();\r\n      const mouth = landmarks.getMouth();\r\n\r\n      const yaw = Math.atan2(eyeRight[0].y - eyeLeft[0].y, eyeRight[0].x - eyeLeft[0].x) * 180 / Math.PI;\r\n      const pitch = Math.atan2(mouth[3].y - nose[0].y, mouth[3].x - nose[0].x) * 180 / Math.PI;\r\n      const roll = Math.atan2(nose[0].y - mouth[0].y, nose[0].x - mouth[0].x) * 180 / Math.PI;\r\n\r\n      return { yaw, pitch, roll };\r\n    };\r\n\r\n    const classifyHeadPose = ({ yaw, pitch, roll }) => {\r\n      const thresholds = {\r\n        yaw: 10,   // Threshold in degrees for left/right turning\r\n        pitch: 10, // Threshold in degrees for up/down tilting\r\n        roll: 10   // Threshold in degrees for tilting to the sides\r\n      };\r\n\r\n      if (pitch > thresholds.pitch) {\r\n        return 'down';\r\n      } else if (pitch < -thresholds.pitch) {\r\n        return 'up';\r\n      } else if (yaw > thresholds.yaw) {\r\n        return 'right';\r\n      } else if (yaw < -thresholds.yaw) {\r\n        return 'left';\r\n      } else {\r\n        return 'neutral';\r\n      }\r\n    };\r\n\r\n    const detectEmotionAndHeadPose = async () => {\r\n      if (videoRef.current) {\r\n        console.log('Performing detection...');\r\n        const detections = await faceapi.detectAllFaces(videoRef.current, new faceapi.TinyFaceDetectorOptions()).withFaceLandmarks().withFaceExpressions();\r\n        console.log('Detections:', detections);\r\n\r\n        if (detections.length > 0) {\r\n          const emotions = detections[0].expressions;\r\n          const landmarks = detections[0].landmarks;\r\n          const maxValue = Math.max(...Object.values(emotions));\r\n          const emotion = Object.keys(emotions).find(key => emotions[key] === maxValue);\r\n          setEmotion(emotion);\r\n          console.log(`Detected emotion: ${emotion}`);\r\n\r\n          const headPose = estimateHeadPose(landmarks);\r\n          console.log('Head pose:', headPose);\r\n          const headPoseClassification = classifyHeadPose(headPose);\r\n          setHeadPoseClassification(headPoseClassification);\r\n          console.log(`Estimated head pose: Yaw: ${headPose.yaw}, Pitch: ${headPose.pitch}, Roll: ${headPose.roll}`);\r\n          console.log(`Head pose classification: ${headPoseClassification}`);\r\n        } else {\r\n          console.log('No faces detected');\r\n        }\r\n      } else {\r\n        console.error('Video reference is not available during emotion detection');\r\n      }\r\n    };\r\n\r\n    loadModels();\r\n\r\n    const intervalId = setInterval(detectEmotionAndHeadPose, 1000); // Check for emotions and head pose every second\r\n\r\n    return () => {\r\n      clearInterval(intervalId);\r\n      if (videoRef.current && videoRef.current.srcObject) {\r\n        videoRef.current.srcObject.getTracks().forEach(track => track.stop());\r\n        console.log('Video stream stopped');\r\n      }\r\n    };\r\n  }, [setEmotion, setHeadPoseClassification]);\r\n\r\n  return (\r\n    <div>\r\n      <video ref={videoRef} autoPlay muted className=\"hidden-video\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmotionDetection;\r\n","C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\blocks\\select.js",["246","247","248","249","250","251","252","253","254","255"],[],"C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\blocks\\aliases.js",[],[],"C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\blocks\\logicalOperators.js",["256","257"],[],"C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\blocks\\tablesAndAttributes.js",["258","259","260"],[],"C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\blocks\\valueInputs.js",["261","262","263","264"],[],"C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\blocks\\mathematicalOperators.js",["265","266","267","268"],[],"C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\blocks\\aggregateBlocks.js",["269","270","271","272","273"],[],"C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\component\\Sidebar.js",[],[],"C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\component\\Sides.js",[],[],"C:\\Users\\janry\\OneDrive\\Desktop\\NEWTHESIS\\VisualQuery\\frontend\\src\\context\\VideoContext.js",[],[],{"ruleId":"274","severity":1,"message":"275","line":3,"column":8,"nodeType":"276","messageId":"277","endLine":3,"endColumn":20},{"ruleId":"274","severity":1,"message":"278","line":6,"column":8,"nodeType":"276","messageId":"277","endLine":6,"endColumn":17},{"ruleId":"279","severity":1,"message":"280","line":181,"column":51,"nodeType":"281","messageId":"282","endLine":181,"endColumn":53},{"ruleId":"279","severity":1,"message":"280","line":197,"column":13,"nodeType":"281","messageId":"282","endLine":197,"endColumn":15},{"ruleId":"274","severity":1,"message":"283","line":201,"column":9,"nodeType":"276","messageId":"277","endLine":201,"endColumn":25},{"ruleId":"284","severity":1,"message":"285","line":210,"column":31,"nodeType":"281","messageId":"286","endLine":210,"endColumn":32},{"ruleId":"279","severity":1,"message":"280","line":211,"column":46,"nodeType":"281","messageId":"282","endLine":211,"endColumn":48},{"ruleId":"279","severity":1,"message":"280","line":212,"column":20,"nodeType":"281","messageId":"282","endLine":212,"endColumn":22},{"ruleId":"284","severity":1,"message":"285","line":213,"column":44,"nodeType":"281","messageId":"286","endLine":213,"endColumn":45},{"ruleId":"284","severity":1,"message":"285","line":213,"column":51,"nodeType":"281","messageId":"286","endLine":213,"endColumn":52},{"ruleId":"284","severity":1,"message":"285","line":215,"column":44,"nodeType":"281","messageId":"286","endLine":215,"endColumn":45},{"ruleId":"279","severity":1,"message":"280","line":218,"column":22,"nodeType":"281","messageId":"282","endLine":218,"endColumn":24},{"ruleId":"274","severity":1,"message":"287","line":31,"column":7,"nodeType":"276","messageId":"277","endLine":31,"endColumn":16},{"ruleId":"279","severity":1,"message":"280","line":103,"column":24,"nodeType":"281","messageId":"282","endLine":103,"endColumn":26},{"ruleId":"279","severity":1,"message":"280","line":107,"column":23,"nodeType":"281","messageId":"282","endLine":107,"endColumn":25},{"ruleId":"279","severity":1,"message":"280","line":182,"column":18,"nodeType":"281","messageId":"282","endLine":182,"endColumn":20},{"ruleId":"279","severity":1,"message":"280","line":182,"column":38,"nodeType":"281","messageId":"282","endLine":182,"endColumn":40},{"ruleId":"279","severity":1,"message":"288","line":92,"column":18,"nodeType":"281","messageId":"282","endLine":92,"endColumn":20},{"ruleId":"279","severity":1,"message":"288","line":92,"column":43,"nodeType":"281","messageId":"282","endLine":92,"endColumn":45},{"ruleId":"279","severity":1,"message":"280","line":94,"column":20,"nodeType":"281","messageId":"282","endLine":94,"endColumn":22},{"ruleId":"279","severity":1,"message":"280","line":94,"column":40,"nodeType":"281","messageId":"282","endLine":94,"endColumn":42},{"ruleId":"279","severity":1,"message":"288","line":54,"column":23,"nodeType":"281","messageId":"282","endLine":54,"endColumn":25},{"ruleId":"279","severity":1,"message":"288","line":54,"column":46,"nodeType":"281","messageId":"282","endLine":54,"endColumn":48},{"ruleId":"279","severity":1,"message":"280","line":61,"column":24,"nodeType":"281","messageId":"282","endLine":61,"endColumn":26},{"ruleId":"279","severity":1,"message":"280","line":94,"column":45,"nodeType":"281","messageId":"282","endLine":94,"endColumn":47},{"ruleId":"279","severity":1,"message":"288","line":114,"column":24,"nodeType":"281","messageId":"282","endLine":114,"endColumn":26},{"ruleId":"279","severity":1,"message":"288","line":128,"column":24,"nodeType":"281","messageId":"282","endLine":128,"endColumn":26},{"ruleId":"279","severity":1,"message":"288","line":142,"column":24,"nodeType":"281","messageId":"282","endLine":142,"endColumn":26},{"ruleId":"279","severity":1,"message":"288","line":156,"column":24,"nodeType":"281","messageId":"282","endLine":156,"endColumn":26},{"ruleId":"279","severity":1,"message":"288","line":170,"column":24,"nodeType":"281","messageId":"282","endLine":170,"endColumn":26},{"ruleId":"274","severity":1,"message":"275","line":3,"column":8,"nodeType":"276","messageId":"277","endLine":3,"endColumn":20},{"ruleId":"274","severity":1,"message":"289","line":14,"column":10,"nodeType":"276","messageId":"277","endLine":14,"endColumn":22},{"ruleId":"274","severity":1,"message":"290","line":14,"column":5,"nodeType":"276","messageId":"277","endLine":14,"endColumn":12},{"ruleId":"274","severity":1,"message":"291","line":7,"column":12,"nodeType":"276","messageId":"277","endLine":7,"endColumn":26},{"ruleId":"274","severity":1,"message":"292","line":645,"column":9,"nodeType":"276","messageId":"277","endLine":645,"endColumn":22},{"ruleId":"274","severity":1,"message":"293","line":655,"column":12,"nodeType":"276","messageId":"277","endLine":655,"endColumn":21},{"ruleId":"274","severity":1,"message":"294","line":657,"column":20,"nodeType":"276","messageId":"277","endLine":657,"endColumn":29},{"ruleId":"274","severity":1,"message":"295","line":658,"column":21,"nodeType":"276","messageId":"277","endLine":658,"endColumn":31},{"ruleId":"274","severity":1,"message":"296","line":16,"column":26,"nodeType":"276","messageId":"277","endLine":16,"endColumn":31},{"ruleId":"274","severity":1,"message":"297","line":24,"column":10,"nodeType":"276","messageId":"277","endLine":24,"endColumn":26},{"ruleId":"298","severity":1,"message":"299","line":105,"column":18,"nodeType":"276","endLine":105,"endColumn":25},{"ruleId":"279","severity":1,"message":"280","line":181,"column":51,"nodeType":"281","messageId":"282","endLine":181,"endColumn":53},{"ruleId":"279","severity":1,"message":"280","line":197,"column":13,"nodeType":"281","messageId":"282","endLine":197,"endColumn":15},{"ruleId":"274","severity":1,"message":"283","line":201,"column":9,"nodeType":"276","messageId":"277","endLine":201,"endColumn":25},{"ruleId":"284","severity":1,"message":"285","line":210,"column":31,"nodeType":"281","messageId":"286","endLine":210,"endColumn":32},{"ruleId":"279","severity":1,"message":"280","line":211,"column":46,"nodeType":"281","messageId":"282","endLine":211,"endColumn":48},{"ruleId":"279","severity":1,"message":"280","line":212,"column":20,"nodeType":"281","messageId":"282","endLine":212,"endColumn":22},{"ruleId":"284","severity":1,"message":"285","line":213,"column":44,"nodeType":"281","messageId":"286","endLine":213,"endColumn":45},{"ruleId":"284","severity":1,"message":"285","line":213,"column":51,"nodeType":"281","messageId":"286","endLine":213,"endColumn":52},{"ruleId":"284","severity":1,"message":"285","line":215,"column":44,"nodeType":"281","messageId":"286","endLine":215,"endColumn":45},{"ruleId":"279","severity":1,"message":"280","line":218,"column":22,"nodeType":"281","messageId":"282","endLine":218,"endColumn":24},{"ruleId":"279","severity":1,"message":"280","line":182,"column":18,"nodeType":"281","messageId":"282","endLine":182,"endColumn":20},{"ruleId":"279","severity":1,"message":"280","line":182,"column":38,"nodeType":"281","messageId":"282","endLine":182,"endColumn":40},{"ruleId":"274","severity":1,"message":"287","line":31,"column":7,"nodeType":"276","messageId":"277","endLine":31,"endColumn":16},{"ruleId":"279","severity":1,"message":"280","line":103,"column":24,"nodeType":"281","messageId":"282","endLine":103,"endColumn":26},{"ruleId":"279","severity":1,"message":"280","line":107,"column":23,"nodeType":"281","messageId":"282","endLine":107,"endColumn":25},{"ruleId":"279","severity":1,"message":"288","line":54,"column":23,"nodeType":"281","messageId":"282","endLine":54,"endColumn":25},{"ruleId":"279","severity":1,"message":"288","line":54,"column":46,"nodeType":"281","messageId":"282","endLine":54,"endColumn":48},{"ruleId":"279","severity":1,"message":"280","line":61,"column":24,"nodeType":"281","messageId":"282","endLine":61,"endColumn":26},{"ruleId":"279","severity":1,"message":"280","line":94,"column":45,"nodeType":"281","messageId":"282","endLine":94,"endColumn":47},{"ruleId":"279","severity":1,"message":"288","line":92,"column":18,"nodeType":"281","messageId":"282","endLine":92,"endColumn":20},{"ruleId":"279","severity":1,"message":"288","line":92,"column":43,"nodeType":"281","messageId":"282","endLine":92,"endColumn":45},{"ruleId":"279","severity":1,"message":"280","line":94,"column":20,"nodeType":"281","messageId":"282","endLine":94,"endColumn":22},{"ruleId":"279","severity":1,"message":"280","line":94,"column":40,"nodeType":"281","messageId":"282","endLine":94,"endColumn":42},{"ruleId":"279","severity":1,"message":"288","line":114,"column":24,"nodeType":"281","messageId":"282","endLine":114,"endColumn":26},{"ruleId":"279","severity":1,"message":"288","line":128,"column":24,"nodeType":"281","messageId":"282","endLine":128,"endColumn":26},{"ruleId":"279","severity":1,"message":"288","line":142,"column":24,"nodeType":"281","messageId":"282","endLine":142,"endColumn":26},{"ruleId":"279","severity":1,"message":"288","line":156,"column":24,"nodeType":"281","messageId":"282","endLine":156,"endColumn":26},{"ruleId":"279","severity":1,"message":"288","line":170,"column":24,"nodeType":"281","messageId":"282","endLine":170,"endColumn":26},"no-unused-vars","'PrivateRoute' is defined but never used.","Identifier","unusedVar","'Dashboard' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'isModifierActive' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'doesMatch' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'VideoContext' is defined but never used.","'user_id' is assigned a value but never used.","'pessimismLevel' is assigned a value but never used.","'getRandomItem' is assigned a value but never used.","'startTime' is assigned a value but never used.","'setErrors' is assigned a value but never used.","'setCorrect' is assigned a value but never used.","'toast' is defined but never used.","'pessimisticLevel' is assigned a value but never used.","react-hooks/exhaustive-deps","The ref value 'videoRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'videoRef.current' to a variable inside the effect, and use that variable in the cleanup function."]
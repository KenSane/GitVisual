{"ast":null,"code":"import * as Blockly from 'blockly/core';\nimport 'blockly/blocks';\nimport { pythonGenerator } from 'blockly/python';\nexport const defineMathematicalOperatorBlocks = () => {\n  Blockly.defineBlocksWithJsonArray([{\n    \"type\": \"compare\",\n    \"message0\": \"%1 %2 %3\",\n    \"args0\": [{\n      \"type\": \"input_value\",\n      \"name\": \"1ConditionC\",\n      \"check\": [\"DatePicker\", \"MATH\", \"CONDITIONCHOOSER\", 'HAVING', 'Boolean', 'Number', 'freeinput', 'aggregate_min', 'aggregate_avg', 'aggregate_max', 'aggregate_sum', 'aggregate_count', 'datepicker']\n    }, {\n      \"type\": \"field_dropdown\",\n      \"name\": \"OP\",\n      \"options\": [[\"=\", \"EQ\"], [\"\\u2260\", \"NEQ\"], [\"<\", \"LT\"], [\"\\u2264\", \"LTE\"], [\">\", \"GT\"], [\"\\u2265\", \"GTE\"], [\"LIKE\", 'L']]\n    }, {\n      \"type\": \"input_value\",\n      \"name\": \"2ConditionC\",\n      \"check\": [\"DatePicker\", \"MATH\", \"CONDITIONCHOOSER\", 'Boolean', 'Number', 'freeinput', 'aggregate_min', 'aggregate_avg', 'aggregate_max', 'aggregate_sum', 'aggregate_count', 'datepicker']\n    }],\n    \"inputsInline\": true,\n    \"output\": \"COMPARE\",\n    \"colour\": '#3ED9D9',\n    \"tooltip\": \"\",\n    \"helpUrl\": \"\"\n  }, {\n    \"type\": \"compareDerived\",\n    \"message0\": \"%1    %2 %3\",\n    \"args0\": [{\n      \"type\": \"input_value\",\n      \"name\": \"1ConditionCD\",\n      \"check\": ['aggregate_AVG', 'aggregate_COUNT', 'aggregate_MAX', 'aggregate_MIN', 'aggregate_SUM', 'CONDITIONCHOOSER']\n    }, {\n      \"type\": \"field_dropdown\",\n      \"name\": \"OP\",\n      \"options\": [[\"=\", \"EQ\"], [\"\\u2260\", \"NEQ\"], [\"<\", \"LT\"], [\"\\u2264\", \"LTE\"], [\">\", \"GT\"], [\"\\u2265\", \"GTE\"]]\n    }, {\n      \"type\": \"input_value\",\n      \"name\": \"2ConditionCD\",\n      \"check\": [\"MATH\", \"CONDITIONCHOOSER\", 'Boolean', 'Number', 'freeinput']\n    }],\n    \"output\": 'DERIVED',\n    \"colour\": 180,\n    \"tooltip\": \"%{BKY_LOGIC_COMPARE_HELPURL}\",\n    \"extensions\": [\"logic_compare\", \"logic_op_tooltip\"]\n  }]);\n  pythonGenerator.forBlock['compare'] = function (block, generator) {\n    var OPERATORS = {\n      'EQ': '=',\n      'NEQ': '!=',\n      'LT': '<',\n      'LTE': '<=',\n      'GT': '>',\n      'GTE': '>=',\n      'IN': 'IS NULL',\n      'INN': 'IS NOT NULL',\n      'I': 'IN',\n      'NI': 'NOT IN',\n      'L': 'LIKE'\n    };\n    var operator = OPERATORS[block.getFieldValue('OP')];\n    var argument0 = pythonGenerator.statementToCode(block, '1ConditionC');\n    var argument1 = '';\n    if (operator != 'IS NULL' && operator != 'IS NOT NULL') {\n      argument1 = pythonGenerator.statementToCode(block, '2ConditionC');\n      if (operator == 'IN' || operator == 'NOT IN') {\n        if (argument1.includes(';')) {\n          if (argument1.includes(';SELECT')) {\n            argument1 = argument1.replace(/;SELECT/g, '<BR> union <BR>select');\n          }\n          argument1 = argument1.replace(';', ' ');\n        }\n        argument1 = '(' + argument1 + ')';\n      }\n    }\n    var code = argument0 + ' ' + operator + ' ' + argument1;\n    return code;\n  };\n  pythonGenerator.forBlock['compareDerived'] = function (block, generator) {\n    var OPERATORS = {\n      'EQ': '=',\n      'NEQ': '!=',\n      'LT': '<',\n      'LTE': '<=',\n      'GT': '>',\n      'GTE': '>='\n    };\n    var operator = OPERATORS[block.getFieldValue('OP')];\n    var argument0 = pythonGenerator.statementToCode(block, '1ConditionCD');\n    var argument1 = pythonGenerator.statementToCode(block, '2ConditionCD');\n    var code = argument0 + ' ' + operator + ' ' + argument1;\n    return code;\n  };\n  Blockly.Blocks['math'] = {\n    init: function () {\n      this.appendValueInput(\"1ConditionM\").setCheck([\"freeinput\", \"CONDITIONCHOOSER\", \"Number\", 'MATH']).setAlign('CENTRE');\n      this.appendValueInput(\"2ConditionM\").setCheck([\"freeinput\", \"CONDITIONCHOOSER\", \"Number\", 'MATH']).setAlign('CENTRE').appendField(new Blockly.FieldDropdown([[\"\\u002B\", \"plus\"], [\"\\u002D\", \"minus\"], [\"\\u00D7\", \"mul\"], [\"\\u00F7\", \"div\"]]), \"mathemator\");\n      this.setInputsInline(true);\n      this.setOutput(true, [\"MATH\"]);\n      this.setColour('#5BE5E5');\n      this.setTooltip(\"\");\n      this.setHelpUrl(\"\");\n    }\n  };\n  pythonGenerator.forBlock['math'] = function (block, generator) {\n    var OPERATORS = {\n      'plus': '+',\n      'minus': '-',\n      'mul': '*',\n      'div': '/'\n    };\n    var operator = OPERATORS[block.getFieldValue('mathemator')];\n    var argument0 = pythonGenerator.statementToCode(block, '1ConditionM').trim();\n    var argument1 = pythonGenerator.statementToCode(block, '2ConditionM');\n    var code = '(' + argument0 + ' ' + operator + ' ' + argument1 + ')';\n    return code;\n  };\n};\ndefineMathematicalOperatorBlocks();","map":{"version":3,"names":["Blockly","pythonGenerator","defineMathematicalOperatorBlocks","defineBlocksWithJsonArray","forBlock","block","generator","OPERATORS","operator","getFieldValue","argument0","statementToCode","argument1","includes","replace","code","Blocks","init","appendValueInput","setCheck","setAlign","appendField","FieldDropdown","setInputsInline","setOutput","setColour","setTooltip","setHelpUrl","trim"],"sources":["C:/Users/janry/Music/VisualQuery/frontend/src/blocks/mathematicalOperators.js"],"sourcesContent":["import * as Blockly from 'blockly/core';\r\nimport 'blockly/blocks';\r\nimport { pythonGenerator } from 'blockly/python';\r\n\r\nexport const defineMathematicalOperatorBlocks = () => {\r\n  Blockly.defineBlocksWithJsonArray([\r\n    {\r\n      \"type\": \"compare\",\r\n      \"message0\": \"%1 %2 %3\",\r\n      \"args0\": [\r\n        {\r\n          \"type\": \"input_value\",\r\n          \"name\": \"1ConditionC\",\r\n          \"check\": [\"DatePicker\", \"MATH\", \"CONDITIONCHOOSER\", 'HAVING', 'Boolean', 'Number', 'freeinput', 'aggregate_min', 'aggregate_avg', 'aggregate_max', 'aggregate_sum', 'aggregate_count', 'datepicker']\r\n        },\r\n        {\r\n          \"type\": \"field_dropdown\",\r\n          \"name\": \"OP\",\r\n          \"options\": [\r\n            [\"=\", \"EQ\"],\r\n            [\"\\u2260\", \"NEQ\"],\r\n            [\"<\", \"LT\"],\r\n            [\"\\u2264\", \"LTE\"],\r\n            [\">\", \"GT\"],\r\n            [\"\\u2265\", \"GTE\"],\r\n            [\"LIKE\", 'L']\r\n          ]\r\n        },\r\n        {\r\n          \"type\": \"input_value\",\r\n          \"name\": \"2ConditionC\",\r\n          \"check\": [\"DatePicker\", \"MATH\", \"CONDITIONCHOOSER\", 'Boolean', 'Number', 'freeinput', 'aggregate_min', 'aggregate_avg', 'aggregate_max', 'aggregate_sum', 'aggregate_count', 'datepicker']\r\n        }\r\n      ],\r\n      \"inputsInline\": true,\r\n      \"output\": \"COMPARE\",\r\n      \"colour\": '#3ED9D9',\r\n      \"tooltip\": \"\",\r\n      \"helpUrl\": \"\"\r\n    },\r\n    {\r\n      \"type\": \"compareDerived\",\r\n      \"message0\": \"%1    %2 %3\",\r\n      \"args0\": [\r\n        {\r\n          \"type\": \"input_value\",\r\n          \"name\": \"1ConditionCD\",\r\n          \"check\": ['aggregate_AVG', 'aggregate_COUNT', 'aggregate_MAX', 'aggregate_MIN', 'aggregate_SUM', 'CONDITIONCHOOSER']\r\n        },\r\n        {\r\n          \"type\": \"field_dropdown\",\r\n          \"name\": \"OP\",\r\n          \"options\": [\r\n            [\"=\", \"EQ\"],\r\n            [\"\\u2260\", \"NEQ\"],\r\n            [\"<\", \"LT\"],\r\n            [\"\\u2264\", \"LTE\"],\r\n            [\">\", \"GT\"],\r\n            [\"\\u2265\", \"GTE\"]\r\n          ]\r\n        },\r\n        {\r\n          \"type\": \"input_value\",\r\n          \"name\": \"2ConditionCD\",\r\n          \"check\": [\"MATH\", \"CONDITIONCHOOSER\", 'Boolean', 'Number', 'freeinput']\r\n        }\r\n      ],\r\n      \"output\": 'DERIVED',\r\n      \"colour\": 180,\r\n      \"tooltip\": \"%{BKY_LOGIC_COMPARE_HELPURL}\",\r\n      \"extensions\": [\"logic_compare\", \"logic_op_tooltip\"]\r\n    }\r\n  ]);\r\n\r\n  pythonGenerator.forBlock['compare'] = function(block, generator) {\r\n    var OPERATORS = {\r\n      'EQ': '=',\r\n      'NEQ': '!=',\r\n      'LT': '<',\r\n      'LTE': '<=',\r\n      'GT': '>',\r\n      'GTE': '>=',\r\n      'IN': 'IS NULL',\r\n      'INN': 'IS NOT NULL',\r\n      'I': 'IN',\r\n      'NI': 'NOT IN',\r\n      'L': 'LIKE'\r\n    };\r\n    var operator = OPERATORS[block.getFieldValue('OP')];\r\n    var argument0 = pythonGenerator.statementToCode(block, '1ConditionC');\r\n    var argument1 = '';\r\n    if (operator != 'IS NULL' && operator != 'IS NOT NULL') {\r\n      argument1 = pythonGenerator.statementToCode(block, '2ConditionC');\r\n      if (operator == 'IN' || operator == 'NOT IN') {\r\n        if (argument1.includes(';')) {\r\n          if (argument1.includes(';SELECT')) {\r\n            argument1 = argument1.replace(/;SELECT/g, '<BR> union <BR>select');\r\n          }\r\n          argument1 = argument1.replace(';', ' ');\r\n        }\r\n        argument1 = '(' + argument1 + ')';\r\n      }\r\n    }\r\n    var code = argument0 + ' ' + operator + ' ' + argument1;\r\n    return code;\r\n  };\r\n\r\n  pythonGenerator.forBlock['compareDerived'] = function(block, generator) {\r\n    var OPERATORS = {\r\n      'EQ': '=',\r\n      'NEQ': '!=',\r\n      'LT': '<',\r\n      'LTE': '<=',\r\n      'GT': '>',\r\n      'GTE': '>='\r\n    };\r\n    var operator = OPERATORS[block.getFieldValue('OP')];\r\n    var argument0 = pythonGenerator.statementToCode(block, '1ConditionCD');\r\n    var argument1 = pythonGenerator.statementToCode(block, '2ConditionCD');\r\n    var code = argument0 + ' ' + operator + ' ' + argument1;\r\n    return code;\r\n  };\r\n\r\n  Blockly.Blocks['math'] = {\r\n    init: function() {\r\n      this.appendValueInput(\"1ConditionM\")\r\n        .setCheck([\"freeinput\", \"CONDITIONCHOOSER\", \"Number\", 'MATH'])\r\n        .setAlign('CENTRE');\r\n      this.appendValueInput(\"2ConditionM\")\r\n        .setCheck([\"freeinput\", \"CONDITIONCHOOSER\", \"Number\", 'MATH'])\r\n        .setAlign('CENTRE')\r\n        .appendField(new Blockly.FieldDropdown([[\"\\u002B\", \"plus\"], [\"\\u002D\", \"minus\"], [\"\\u00D7\", \"mul\"], [\"\\u00F7\", \"div\"]]), \"mathemator\");\r\n      this.setInputsInline(true);\r\n      this.setOutput(true, [\"MATH\"]);\r\n      this.setColour('#5BE5E5');\r\n      this.setTooltip(\"\");\r\n      this.setHelpUrl(\"\");\r\n    }\r\n  };\r\n\r\n  pythonGenerator.forBlock['math'] = function(block, generator) {\r\n    var OPERATORS = {\r\n      'plus': '+',\r\n      'minus': '-',\r\n      'mul': '*',\r\n      'div': '/'\r\n    };\r\n    var operator = OPERATORS[block.getFieldValue('mathemator')];\r\n    var argument0 = pythonGenerator.statementToCode(block, '1ConditionM').trim();\r\n    var argument1 = pythonGenerator.statementToCode(block, '2ConditionM');\r\n    var code = '(' + argument0 + ' ' + operator + ' ' + argument1 + ')';\r\n    return code;\r\n  };\r\n};\r\n\r\ndefineMathematicalOperatorBlocks();\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
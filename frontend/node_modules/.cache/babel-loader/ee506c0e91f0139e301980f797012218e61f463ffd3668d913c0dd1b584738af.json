{"ast":null,"code":"import * as Blockly from 'blockly/core';\nimport { pythonGenerator } from 'blockly/python'; // Import the Python generator\nimport 'blockly/python';\nconst tableNames = [['Department', 'Department'], ['Professor', 'Professor'], ['Student', 'Student'], ['Course', 'Course'], ['Enrollment', 'Enrollment'], ['Class', 'Class']];\nexport const defineSelectBlocks = () => {\n  // Define the 'select' block\n  Blockly.Blocks['select'] = {\n    init: function () {\n      this.appendValueInput('SELECT').appendField('SELECT   ').setCheck(['freeinput', 'tablename_as', 'ALL', 'CONDITIONCHOOSER', 'aggregate_min', 'aggregate_max', 'aggregate_avg', 'aggregate_sum', 'aggregate_count']).appendField(new Blockly.FieldDropdown([[\"\\u2009\", 'blank'], [\"ALL\", 'all'], [\"DISTINCT\", 'distinct']]), 'option');\n      this.setInputsInline(false);\n      this.setPreviousStatement(true, ['SELECT', 'WHERE', 'GROUP BY', 'HAVING', 'ORDER BY', 'FROM']);\n      this.setNextStatement(true, ['SELECT', 'WHERE', 'GROUP BY', 'HAVING', 'ORDER BY', 'FROM']);\n      this.setColour('#8007f2');\n    }\n  };\n\n  // Define the Python generator for the 'select' block\n  pythonGenerator.forBlock['select'] = function (block, generator) {\n    var select = pythonGenerator.statementToCode(block, 'SELECT');\n    if (select.endsWith(',')) {\n      select = select.slice(0, -1);\n    }\n    select = select.replace(/'/g, '\"');\n    var option = block.getFieldValue('option');\n    var code = option === 'distinct' ? 'SELECT DISTINCT ' : 'SELECT ';\n    code += select + ' ';\n    return code;\n  };\n\n  // Define the 'select_from' block\n  Blockly.Blocks['select_from'] = {\n    init: function () {\n      this.appendValueInput('FROM').appendField('FROM ').setCheck(['TABLE', 'tablename_as']);\n      this.setInputsInline(false);\n      this.setPreviousStatement(true, ['SELECT']);\n      this.setNextStatement(true, ['WHERE', 'GROUP BY', 'HAVING', 'ORDER BY', 'FROM']);\n      this.setColour('#8007f2');\n    }\n  };\n\n  // Define the Python generator for the 'select_from' block\n  pythonGenerator.forBlock['select_from'] = function (block, generator) {\n    var from = pythonGenerator.statementToCode(block, 'FROM');\n    from = from.substring(0, from.length);\n    return 'FROM ' + from + ' ';\n  };\n\n  // Define the 'select_where' block\n  Blockly.Blocks['select_where'] = {\n    init: function () {\n      this.appendValueInput('whereInput').setCheck(['BETWEEN', 'AND', 'OR', 'COMPARE', 'NULLIFIER', 'INNIFIER', 'NOT', 'freeinput']).appendField(\"WHERE                 \");\n      this.setPreviousStatement(true, ['FROM']);\n      this.setNextStatement(true, ['WHERE', 'GROUP BY']);\n      this.setColour('#8007f2');\n      this.setTooltip(\"\");\n      this.setHelpUrl(\"\");\n    }\n  };\n\n  // Define the Python generator for the 'select_where' block\n  pythonGenerator.forBlock['select_where'] = function (block, generator) {\n    var code = pythonGenerator.statementToCode(block, 'whereInput');\n    return 'WHERE ' + code + ' ';\n  };\n\n  // Define the 'select_groupby' block\n  Blockly.Blocks['select_groupby'] = {\n    init: function () {\n      this.appendValueInput('groupInput').setCheck(['freeinput', \"CONDITIONCHOOSER\"]).appendField(\"GROUP BY \");\n      this.setPreviousStatement(true, ['WHERE', 'FROM']);\n      this.setNextStatement(true, ['GROUP BY', 'HAVING']);\n      this.setColour('#8007f2');\n      this.setTooltip(\"\");\n      this.setHelpUrl(\"\");\n    }\n  };\n\n  // Define the Python generator for the 'select_groupby' block\n  pythonGenerator.forBlock['select_groupby'] = function (block, generator) {\n    var code = pythonGenerator.statementToCode(block, 'groupInput');\n    return 'GROUP BY ' + code + ' ';\n  };\n\n  // Define the 'select_having' block\n  Blockly.Blocks['select_having'] = {\n    init: function () {\n      this.appendValueInput('haveInput').setCheck([\"COMPARE\"]).appendField(\"HAVING           \");\n      this.setPreviousStatement(true, ['GROUP BY']);\n      this.setNextStatement(true, ['HAVING', 'ORDER BY']);\n      this.setColour('#8007f2');\n      this.setTooltip(\"\");\n      this.setHelpUrl(\"\");\n      this.setInputsInline(true);\n    }\n  };\n\n  // Define the Python generator for the 'select_having' block\n  pythonGenerator.forBlock['select_having'] = function (block, generator) {\n    var code = pythonGenerator.statementToCode(block, 'haveInput');\n    return 'HAVING ' + code + ' ';\n  };\n\n  // Define the 'select_orderby' block\n  Blockly.Blocks['select_orderby'] = {\n    init: function () {\n      this.appendValueInput('orderInput').setCheck([\"CONDITIONCHOOSER\", 'aggregate_min', 'aggregate_avg', 'aggregate_max', 'aggregate_sum', 'aggregate_count', 'freeinput']).appendField(\"ORDER BY        \");\n      this.setPreviousStatement(true, ['GROUP BY', 'HAVING']);\n      this.setNextStatement(true, ['ORDER BY']);\n      this.setColour('#8007f2');\n      this.setTooltip(\"\");\n      this.setHelpUrl(\"\");\n    }\n  };\n\n  // Define the Python generator for the 'select_orderby' block\n  pythonGenerator.forBlock['select_orderby'] = function (block, generator) {\n    var code = pythonGenerator.statementToCode(block, 'orderInput');\n    var i = 1;\n    var countAdditionalOBs = 1;\n    while (block.getInput('OB' + countAdditionalOBs)) {\n      countAdditionalOBs++;\n    }\n    while (i <= countAdditionalOBs) {\n      code = code.concat(pythonGenerator.statementToCode(block, 'OB' + i));\n      i++;\n    }\n    code = code.replace(/blank/g, ',');\n    code = code.replace(/SC/g, 'SC,');\n    code = 'ORDER BY ' + code + ' ';\n    code = code.replace(',;', ';');\n    return code;\n  };\n\n  // Define the 'all_join' block\n  Blockly.Blocks['all_join'] = {\n    init: function () {\n      this.appendValueInput(\"STATEMENT\").appendField(new Blockly.FieldDropdown([['\\u2009', 'BLANKJ'], ['INNER', 'INNER'], ['LEFT', 'LEFT'], ['RIGHT', 'RIGHT']]), \"chooseTableType\").appendField('JOIN').appendField(new Blockly.FieldDropdown(tableNames), \"chooseTableJoin2\").setCheck(\"COMPARE\").appendField(new Blockly.FieldDropdown([['ON', 'onModifier'], ['\\u2009', 'Blank']]), \"modifierActive\");\n      this.setOutput(true, [\"INNER_JOIN\"]);\n      this.setColour('#8007f2');\n      this.setTooltip(\"\");\n      this.setHelpUrl(\"\");\n      this.setOnChange(function (changeEvent) {\n        if (this.getInput(\"STATEMENT\") == null) {\n          if (this.getFieldValue('modifierActive') !== 'Blank') {\n            this.removeInput(\"noSTATEMENT\");\n            this.appendValueInput(\"STATEMENT\").appendField(new Blockly.FieldDropdown([['\\u2009', 'BLANKJ'], ['INNER', 'INNER'], ['LEFT', 'LEFT'], ['RIGHT', 'RIGHT']]), \"chooseTableType\").appendField('JOIN').appendField(new Blockly.FieldDropdown(tableNames), \"chooseTableJoin2\").setCheck(\"COMPARE\").appendField(new Blockly.FieldDropdown([['ON', 'onModifier'], ['\\u2009', 'Blank']]), \"modifierActive\");\n          }\n        } else {\n          if (this.getFieldValue('modifierActive') == 'Blank') {\n            this.removeInput(\"STATEMENT\");\n            this.appendValueInput(\"noSTATEMENT\").appendField(new Blockly.FieldDropdown([['\\u2009', 'BLANKJ'], ['INNER', 'INNER'], ['LEFT', 'LEFT'], ['RIGHT', 'RIGHT']]), \"chooseTableType\").appendField('JOIN').setCheck(\"tablename_as\").appendField(new Blockly.FieldDropdown([['\\u2009', 'Blank'], ['ON', 'onModifier']]), \"modifierActive\");\n          }\n        }\n      });\n    }\n  };\n\n  // Define the Python generator for the 'all_join' block\n  pythonGenerator.forBlock['all_join'] = function (block, generator) {\n    var type = block.getFieldValue('chooseTableType');\n    if (type == 'BLANKJ') {\n      type = '';\n    }\n    var join = '';\n    var isModifierActive = '';\n    var statement = '';\n    var nostatement = '';\n    if (block.getInput('STATEMENT') != null) {\n      join = block.getFieldValue('chooseTableJoin2');\n      statement = pythonGenerator.statementToCode(block, 'STATEMENT');\n    } else {\n      nostatement = pythonGenerator.statementToCode(block, 'noSTATEMENT');\n    }\n    var code = type + ' join' + ' ';\n    if (block.getFieldValue('modifierActive') == 'onModifier') {\n      if (statement == '') {\n        code = code.concat('' + join + ' ' + 'on' + ' ');\n      } else {\n        code = code.concat('' + join + ' ' + 'on' + statement + ' ');\n      }\n    } else {\n      if (nostatement == '') {\n        code = code.concat('' + join + ' ');\n      } else {\n        code = code.concat('' + join + ' ' + nostatement + ' ');\n      }\n    }\n    return code;\n  };\n};\ndefineSelectBlocks();","map":{"version":3,"names":["Blockly","pythonGenerator","tableNames","defineSelectBlocks","Blocks","init","appendValueInput","appendField","setCheck","FieldDropdown","setInputsInline","setPreviousStatement","setNextStatement","setColour","forBlock","block","generator","select","statementToCode","endsWith","slice","replace","option","getFieldValue","code","from","substring","length","setTooltip","setHelpUrl","i","countAdditionalOBs","getInput","concat","setOutput","setOnChange","changeEvent","removeInput","type","join","isModifierActive","statement","nostatement"],"sources":["C:/Users/janry/OneDrive/Desktop/NEWTHESIS/VisualQuery/frontend/src/blocks/select.js"],"sourcesContent":["import * as Blockly from 'blockly/core';\r\nimport { pythonGenerator } from 'blockly/python'; // Import the Python generator\r\nimport 'blockly/python';\r\n\r\nconst tableNames = [\r\n  ['Department', 'Department'],\r\n  ['Professor', 'Professor'],\r\n  ['Student', 'Student'],\r\n  ['Course', 'Course'],\r\n  ['Enrollment', 'Enrollment'],\r\n  ['Class', 'Class']\r\n];\r\n\r\nexport const defineSelectBlocks = () => {\r\n  // Define the 'select' block\r\n  Blockly.Blocks['select'] = {\r\n    init: function() {\r\n      this.appendValueInput('SELECT')\r\n        .appendField('SELECT   ')\r\n        .setCheck(['freeinput', 'tablename_as', 'ALL', 'CONDITIONCHOOSER', 'aggregate_min', 'aggregate_max', 'aggregate_avg', 'aggregate_sum', 'aggregate_count'])\r\n        .appendField(new Blockly.FieldDropdown([[\"\\u2009\", 'blank'], [\"ALL\", 'all'], [\"DISTINCT\", 'distinct']]), 'option');\r\n      this.setInputsInline(false);\r\n      this.setPreviousStatement(true, ['SELECT', 'WHERE', 'GROUP BY', 'HAVING', 'ORDER BY', 'FROM']);\r\n      this.setNextStatement(true, ['SELECT', 'WHERE', 'GROUP BY', 'HAVING', 'ORDER BY', 'FROM']);\r\n      this.setColour('#8007f2');\r\n    }\r\n  };\r\n\r\n  // Define the Python generator for the 'select' block\r\n  pythonGenerator.forBlock['select'] = function(block, generator) {\r\n    var select = pythonGenerator.statementToCode(block, 'SELECT');\r\n    if (select.endsWith(',')) {\r\n      select = select.slice(0, -1);\r\n    }\r\n    select = select.replace(/'/g, '\"');\r\n    var option = block.getFieldValue('option');\r\n    var code = (option === 'distinct') ? 'SELECT DISTINCT ' : 'SELECT ';\r\n    code += select + ' ';\r\n    return code;\r\n  };\r\n\r\n  // Define the 'select_from' block\r\n  Blockly.Blocks['select_from'] = {\r\n    init: function() {\r\n      this.appendValueInput('FROM')\r\n        .appendField('FROM ')\r\n        .setCheck(['TABLE', 'tablename_as']);\r\n      this.setInputsInline(false);\r\n      this.setPreviousStatement(true, ['SELECT']);\r\n      this.setNextStatement(true, ['WHERE', 'GROUP BY', 'HAVING', 'ORDER BY', 'FROM']);\r\n      this.setColour('#8007f2');\r\n    }\r\n  };\r\n\r\n  // Define the Python generator for the 'select_from' block\r\n  pythonGenerator.forBlock['select_from'] = function(block, generator) {\r\n    var from = pythonGenerator.statementToCode(block, 'FROM');\r\n    from = from.substring(0, from.length);\r\n    return 'FROM ' + from + ' ';\r\n  };\r\n\r\n  // Define the 'select_where' block\r\n  Blockly.Blocks['select_where'] = {\r\n    init: function() {\r\n      this.appendValueInput('whereInput')\r\n        .setCheck(['BETWEEN', 'AND', 'OR', 'COMPARE', 'NULLIFIER', 'INNIFIER', 'NOT', 'freeinput'])\r\n        .appendField(\"WHERE                 \");\r\n      this.setPreviousStatement(true, ['FROM']);\r\n      this.setNextStatement(true, ['WHERE', 'GROUP BY']);\r\n      this.setColour('#8007f2');\r\n      this.setTooltip(\"\");\r\n      this.setHelpUrl(\"\");\r\n    }\r\n  };\r\n\r\n  // Define the Python generator for the 'select_where' block\r\n  pythonGenerator.forBlock['select_where'] = function(block, generator) {\r\n    var code = pythonGenerator.statementToCode(block, 'whereInput');\r\n    return 'WHERE ' + code + ' ';\r\n  };\r\n\r\n  // Define the 'select_groupby' block\r\n  Blockly.Blocks['select_groupby'] = {\r\n    init: function() {\r\n      this.appendValueInput('groupInput')\r\n        .setCheck(['freeinput', \"CONDITIONCHOOSER\"])\r\n        .appendField(\"GROUP BY \");\r\n      this.setPreviousStatement(true, ['WHERE', 'FROM']);\r\n      this.setNextStatement(true, ['GROUP BY', 'HAVING']);\r\n      this.setColour('#8007f2');\r\n      this.setTooltip(\"\");\r\n      this.setHelpUrl(\"\");\r\n    }\r\n  };\r\n\r\n  // Define the Python generator for the 'select_groupby' block\r\n  pythonGenerator.forBlock['select_groupby'] = function(block, generator) {\r\n    var code = pythonGenerator.statementToCode(block, 'groupInput');\r\n    return 'GROUP BY ' + code + ' ';\r\n  };\r\n\r\n  // Define the 'select_having' block\r\n  Blockly.Blocks['select_having'] = {\r\n    init: function() {\r\n      this.appendValueInput('haveInput')\r\n        .setCheck([\"COMPARE\"])\r\n        .appendField(\"HAVING           \");\r\n      this.setPreviousStatement(true, ['GROUP BY']);\r\n      this.setNextStatement(true, ['HAVING', 'ORDER BY']);\r\n      this.setColour('#8007f2');\r\n      this.setTooltip(\"\");\r\n      this.setHelpUrl(\"\");\r\n      this.setInputsInline(true);\r\n    }\r\n  };\r\n\r\n  // Define the Python generator for the 'select_having' block\r\n  pythonGenerator.forBlock['select_having'] = function(block, generator) {\r\n    var code = pythonGenerator.statementToCode(block, 'haveInput');\r\n    return 'HAVING ' + code + ' ';\r\n  };\r\n\r\n  // Define the 'select_orderby' block\r\n  Blockly.Blocks['select_orderby'] = {\r\n    init: function() {\r\n      this.appendValueInput('orderInput')\r\n        .setCheck([\"CONDITIONCHOOSER\", 'aggregate_min', 'aggregate_avg', 'aggregate_max', 'aggregate_sum', 'aggregate_count', 'freeinput'])\r\n        .appendField(\"ORDER BY        \");\r\n      this.setPreviousStatement(true, ['GROUP BY', 'HAVING']);\r\n      this.setNextStatement(true, ['ORDER BY']);\r\n      this.setColour('#8007f2');\r\n      this.setTooltip(\"\");\r\n      this.setHelpUrl(\"\");\r\n    }\r\n  };\r\n\r\n  // Define the Python generator for the 'select_orderby' block\r\n  pythonGenerator.forBlock['select_orderby'] = function(block, generator) {\r\n    var code = pythonGenerator.statementToCode(block, 'orderInput');\r\n    var i = 1;\r\n    var countAdditionalOBs = 1;\r\n    while (block.getInput('OB' + countAdditionalOBs)) {\r\n      countAdditionalOBs++;\r\n    }\r\n    while (i <= countAdditionalOBs) {\r\n      code = code.concat(pythonGenerator.statementToCode(block, 'OB' + i));\r\n      i++;\r\n    }\r\n    code = code.replace(/blank/g, ',');\r\n    code = code.replace(/SC/g, 'SC,');\r\n    code = 'ORDER BY ' + code + ' ';\r\n    code = code.replace(',;', ';');\r\n    return code;\r\n  };\r\n\r\n  // Define the 'all_join' block\r\n  Blockly.Blocks['all_join'] = {\r\n    init: function() {\r\n      this.appendValueInput(\"STATEMENT\")\r\n        .appendField(new Blockly.FieldDropdown([['\\u2009', 'BLANKJ'], ['INNER', 'INNER'], ['LEFT', 'LEFT'], ['RIGHT', 'RIGHT']]), \"chooseTableType\")\r\n        .appendField('JOIN')\r\n        .appendField(new Blockly.FieldDropdown(tableNames), \"chooseTableJoin2\")\r\n        .setCheck(\"COMPARE\")\r\n        .appendField(new Blockly.FieldDropdown([['ON', 'onModifier'], ['\\u2009', 'Blank']]), \"modifierActive\");\r\n      this.setOutput(true, [\"INNER_JOIN\"]);\r\n      this.setColour('#8007f2');\r\n      this.setTooltip(\"\");\r\n      this.setHelpUrl(\"\");\r\n      this.setOnChange(function(changeEvent){\r\n        if(this.getInput(\"STATEMENT\") == null){\r\n          if(this.getFieldValue('modifierActive') !== 'Blank'){\r\n            this.removeInput(\"noSTATEMENT\");\r\n            this.appendValueInput(\"STATEMENT\")\r\n              .appendField(new Blockly.FieldDropdown([['\\u2009', 'BLANKJ'], ['INNER', 'INNER'], ['LEFT', 'LEFT'], ['RIGHT', 'RIGHT']]), \"chooseTableType\")\r\n              .appendField('JOIN')\r\n              .appendField(new Blockly.FieldDropdown(tableNames), \"chooseTableJoin2\")\r\n              .setCheck(\"COMPARE\")\r\n              .appendField(new Blockly.FieldDropdown([['ON', 'onModifier'], ['\\u2009', 'Blank']]), \"modifierActive\");\r\n          }\r\n        } else {\r\n          if(this.getFieldValue('modifierActive') == 'Blank'){\r\n            this.removeInput(\"STATEMENT\");\r\n            this.appendValueInput(\"noSTATEMENT\")\r\n              .appendField(new Blockly.FieldDropdown([['\\u2009', 'BLANKJ'], ['INNER', 'INNER'], ['LEFT', 'LEFT'], ['RIGHT', 'RIGHT']]), \"chooseTableType\")\r\n              .appendField('JOIN')\r\n              .setCheck(\"tablename_as\")\r\n              .appendField(new Blockly.FieldDropdown([['\\u2009', 'Blank'], ['ON', 'onModifier']]), \"modifierActive\");\r\n          }\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  // Define the Python generator for the 'all_join' block\r\n  pythonGenerator.forBlock['all_join'] = function(block, generator) {\r\n    var type = block.getFieldValue('chooseTableType');\r\n    if(type == 'BLANKJ'){\r\n      type = '';\r\n    }\r\n    var join = '';\r\n    var isModifierActive = '';\r\n    var statement = '';\r\n    var nostatement = '';\r\n    if(block.getInput('STATEMENT') != null){\r\n      join = block.getFieldValue('chooseTableJoin2');\r\n      statement = pythonGenerator.statementToCode(block, 'STATEMENT');\r\n    } else {\r\n      nostatement = pythonGenerator.statementToCode(block, 'noSTATEMENT');\r\n    }\r\n    var code = type + ' join' + ' ';\r\n    if(block.getFieldValue('modifierActive') == 'onModifier'){\r\n      if(statement == ''){\r\n        code = code.concat('' + join + ' ' + 'on' + ' ');\r\n      } else {\r\n        code = code.concat('' + join + ' ' + 'on' + statement + ' ');\r\n      }\r\n    } else {\r\n      if(nostatement == ''){\r\n        code = code.concat('' + join + ' ');\r\n      } else {\r\n        code = code.concat('' + join + ' ' + nostatement + ' ');\r\n      }\r\n    }\r\n    return code;\r\n  };\r\n};\r\n\r\ndefineSelectBlocks();\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import * as Blockly from 'blockly/core';\nimport 'blockly/blocks';\nimport { pythonGenerator } from 'blockly/python';\nconst tables = ['Department', 'Professor', 'Student', 'Course', 'Enrollment', 'Class'];\nconst columns = {\n  'Department': ['DepartmentID', 'DepartmentName'],\n  'Professor': ['ProfessorID', 'FirstName', 'LastName', 'Department'],\n  'Student': ['StudentID', 'FirstName', 'LastName', 'EnrollmentDate'],\n  'Course': ['CourseID', 'CourseName', 'Department'],\n  'Enrollment': ['EnrollmentID', 'Student', 'Course', 'EnrollmentDate'],\n  'Class': ['ClassID', 'Course', 'Professor', 'Schedule']\n};\nconst fillTables = () => {\n  return tables.map(table => [table, table]);\n};\nconst fillColumns = table => {\n  return columns[table].map(column => [column, column]);\n};\nconst doesMatch = (selectedTable, correctColumn) => {\n  return columns[selectedTable].includes(correctColumn);\n};\nexport const defineTableBlocks = () => {\n  Blockly.Blocks['allchooser'] = {\n    init: function () {\n      this.appendDummyInput('allInput').setAlign('CENTRE').appendField(\"*\");\n      this.setOutput(true, \"ALL\");\n      this.setColour('#f1bf06');\n      this.setTooltip(\"\");\n      this.setHelpUrl(\"\");\n    }\n  };\n  pythonGenerator.forBlock['allchooser'] = function (block, generator) {\n    return '*';\n  };\n  Blockly.Blocks['table'] = {\n    init: function () {\n      this.appendDummyInput('previousTables').appendField('     ').appendField(new Blockly.FieldDropdown(fillTables()), \"chooseTableT\");\n      this.setOutput(true, 'TABLE');\n      this.setColour('#f1bf06');\n      this.setTooltip(\"Select a table\");\n      this.setHelpUrl(\"\");\n    }\n  };\n  pythonGenerator.forBlock['table'] = function (block, generator) {\n    var chosenTableT = block.getFieldValue('chooseTableT');\n    return chosenTableT;\n  };\n  Blockly.Blocks['conditionchooser'] = {\n    init: function () {\n      this.appendDummyInput('listInput').appendField(\"     \").appendField(new Blockly.FieldDropdown(fillTables(), this.updateColumns.bind(this)), \"chooseTableC\").appendField('.', \"dot\").appendField(new Blockly.FieldDropdown(fillColumns('Department')), \"chooseColumnC\");\n      this.setInputsInline(true);\n      this.setOutput(true, 'CONDITIONCHOOSER');\n      this.setColour('#f1bf06');\n      this.setTooltip(\"Select a table and column\");\n      this.setHelpUrl(\"\");\n    },\n    updateColumns: function (newTable) {\n      const columnDropdown = this.getField('chooseColumnC');\n      if (columnDropdown) {\n        columnDropdown.menuGenerator_ = fillColumns(newTable);\n        columnDropdown.setValue(columnDropdown.menuGenerator_[0][1]);\n      }\n    },\n    onchange: function (changeEvent) {\n      if (changeEvent && changeEvent.element === 'field' && changeEvent.name === 'chooseTableC') {\n        const selectedTable = this.getFieldValue('chooseTableC');\n        this.updateColumns(selectedTable);\n      }\n    }\n  };\n  pythonGenerator.forBlock['conditionchooser'] = function (block, generator) {\n    var chosenTableC = block.getFieldValue('chooseTableC');\n    var chosenColumnC = block.getFieldValue('chooseColumnC');\n    var chosenOrderC = '';\n    if (block.getInput('listOrder')) {\n      chosenOrderC = block.getFieldValue('orderC');\n      if (chosenOrderC == 'BLANK') {\n        chosenOrderC = '';\n      }\n    }\n    if (chosenColumnC == 'all') {\n      chosenColumnC = '*';\n    }\n    var code = chosenTableC + '.' + chosenColumnC + ' ' + chosenOrderC;\n    return code.trim();\n  };\n};\ndefineTableBlocks();","map":{"version":3,"names":["Blockly","pythonGenerator","tables","columns","fillTables","map","table","fillColumns","column","doesMatch","selectedTable","correctColumn","includes","defineTableBlocks","Blocks","init","appendDummyInput","setAlign","appendField","setOutput","setColour","setTooltip","setHelpUrl","forBlock","block","generator","FieldDropdown","chosenTableT","getFieldValue","updateColumns","bind","setInputsInline","newTable","columnDropdown","getField","menuGenerator_","setValue","onchange","changeEvent","element","name","chosenTableC","chosenColumnC","chosenOrderC","getInput","code","trim"],"sources":["C:/Users/janry/OneDrive/Desktop/NEWTHESIS/VisualQuery/frontend/src/blocks/tablesAndAttributes.js"],"sourcesContent":["import * as Blockly from 'blockly/core';\r\nimport 'blockly/blocks';\r\nimport { pythonGenerator } from 'blockly/python';\r\n\r\nconst tables = [\r\n  'Department', \r\n  'Professor', \r\n  'Student', \r\n  'Course', \r\n  'Enrollment', \r\n  'Class'\r\n];\r\n\r\nconst columns = {\r\n  'Department': ['DepartmentID', 'DepartmentName'],\r\n  'Professor': ['ProfessorID', 'FirstName', 'LastName', 'Department'],\r\n  'Student': ['StudentID', 'FirstName', 'LastName', 'EnrollmentDate'],\r\n  'Course': ['CourseID', 'CourseName', 'Department'],\r\n  'Enrollment': ['EnrollmentID', 'Student', 'Course', 'EnrollmentDate'],\r\n  'Class': ['ClassID', 'Course', 'Professor', 'Schedule']\r\n};\r\n\r\nconst fillTables = () => {\r\n  return tables.map(table => [table, table]);\r\n};\r\n\r\nconst fillColumns = (table) => {\r\n  return columns[table].map(column => [column, column]);\r\n};\r\n\r\nconst doesMatch = (selectedTable, correctColumn) => {\r\n  return columns[selectedTable].includes(correctColumn);\r\n};\r\n\r\nexport const defineTableBlocks = () => {\r\n  Blockly.Blocks['allchooser'] = {\r\n    init: function() {\r\n      this.appendDummyInput('allInput')\r\n        .setAlign('CENTRE')\r\n        .appendField(\"*\");\r\n      this.setOutput(true, \"ALL\");\r\n      this.setColour('#f1bf06');\r\n      this.setTooltip(\"\");\r\n      this.setHelpUrl(\"\");\r\n    }\r\n  };\r\n\r\n  pythonGenerator.forBlock['allchooser'] = function(block, generator) {\r\n    return '*';\r\n  };\r\n\r\n  Blockly.Blocks['table'] = {\r\n    init: function() {\r\n      this.appendDummyInput('previousTables')\r\n        .appendField('     ')\r\n        .appendField(new Blockly.FieldDropdown(fillTables()), \"chooseTableT\");\r\n      this.setOutput(true, 'TABLE');\r\n      this.setColour('#f1bf06');\r\n      this.setTooltip(\"Select a table\");\r\n      this.setHelpUrl(\"\");\r\n    }\r\n  };\r\n\r\n  pythonGenerator.forBlock['table'] = function(block, generator) {\r\n    var chosenTableT = block.getFieldValue('chooseTableT');\r\n    return chosenTableT;\r\n  };\r\n\r\n  Blockly.Blocks['conditionchooser'] = {\r\n    init: function() {\r\n      this.appendDummyInput('listInput')\r\n        .appendField(\"     \")\r\n        .appendField(new Blockly.FieldDropdown(fillTables(), this.updateColumns.bind(this)), \"chooseTableC\")\r\n        .appendField('.', \"dot\")\r\n        .appendField(new Blockly.FieldDropdown(fillColumns('Department')), \"chooseColumnC\");\r\n      this.setInputsInline(true);\r\n      this.setOutput(true, 'CONDITIONCHOOSER');\r\n      this.setColour('#f1bf06');\r\n      this.setTooltip(\"Select a table and column\");\r\n      this.setHelpUrl(\"\");\r\n    },\r\n    updateColumns: function(newTable) {\r\n      const columnDropdown = this.getField('chooseColumnC');\r\n      if (columnDropdown) {\r\n        columnDropdown.menuGenerator_ = fillColumns(newTable);\r\n        columnDropdown.setValue(columnDropdown.menuGenerator_[0][1]);\r\n      }\r\n    },\r\n    onchange: function(changeEvent) {\r\n      if (changeEvent && changeEvent.element === 'field' && changeEvent.name === 'chooseTableC') {\r\n        const selectedTable = this.getFieldValue('chooseTableC');\r\n        this.updateColumns(selectedTable);\r\n      }\r\n    }\r\n  };\r\n\r\n  pythonGenerator.forBlock['conditionchooser'] = function(block, generator) {\r\n    var chosenTableC = block.getFieldValue('chooseTableC');\r\n    var chosenColumnC = block.getFieldValue('chooseColumnC');\r\n    var chosenOrderC = '';\r\n    if (block.getInput('listOrder')) {\r\n      chosenOrderC = block.getFieldValue('orderC');\r\n      if (chosenOrderC == 'BLANK') {\r\n        chosenOrderC = '';\r\n      }\r\n    }\r\n    if (chosenColumnC == 'all') {\r\n      chosenColumnC = '*';\r\n    }\r\n    var code = chosenTableC + '.' + chosenColumnC + ' ' + chosenOrderC;\r\n    return code.trim();\r\n  };\r\n};\r\n\r\ndefineTableBlocks();\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
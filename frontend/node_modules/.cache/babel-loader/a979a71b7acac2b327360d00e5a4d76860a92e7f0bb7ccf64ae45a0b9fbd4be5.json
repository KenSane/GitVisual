{"ast":null,"code":"import * as Blockly from 'blockly/core';\nimport 'blockly/blocks';\nimport { pythonGenerator } from 'blockly/python';\nexport const defineAggregateBlocks = () => {\n  Blockly.defineBlocksWithJsonArray([{\n    \"type\": \"aggregate_min\",\n    \"message0\": \"MIN %1\",\n    \"args0\": [{\n      \"type\": \"input_value\",\n      \"name\": \"min\",\n      \"check\": [\"CONDITIONCHOOSER\", 'freeinput']\n    }],\n    \"inputsInline\": true,\n    \"output\": 'aggregate_min',\n    \"colour\": '#C440C4',\n    \"tooltip\": \"\",\n    \"helpUrl\": \"\",\n    \"extensions\": 'aggregate_Extensions'\n  }, {\n    \"type\": \"aggregate_avg\",\n    \"message0\": \"AVG %1\",\n    \"args0\": [{\n      \"type\": \"input_value\",\n      \"name\": \"avg\",\n      \"check\": [\"CONDITIONCHOOSER\", 'freeinput']\n    }],\n    \"inputsInline\": true,\n    \"output\": 'aggregate_avg',\n    \"colour\": '#C440C4',\n    \"tooltip\": \"\",\n    \"helpUrl\": \"\",\n    \"extensions\": 'aggregate_Extensions'\n  }, {\n    \"type\": \"aggregate_max\",\n    \"message0\": \"MAX %1\",\n    \"args0\": [{\n      \"type\": \"input_value\",\n      \"name\": \"max\",\n      \"check\": [\"CONDITIONCHOOSER\", 'freeinput']\n    }],\n    \"inputsInline\": true,\n    \"output\": 'aggregate_max',\n    \"colour\": '#C440C4',\n    \"tooltip\": \"\",\n    \"helpUrl\": \"\",\n    \"extensions\": 'aggregate_Extensions'\n  }, {\n    \"type\": \"aggregate_sum\",\n    \"message0\": \"SUM %1\",\n    \"args0\": [{\n      \"type\": \"input_value\",\n      \"name\": \"sum\",\n      \"check\": [\"CONDITIONCHOOSER\", 'freeinput', 'MATH']\n    }],\n    \"inputsInline\": true,\n    \"output\": 'aggregate_sum',\n    \"colour\": '#C440C4',\n    \"tooltip\": \"\",\n    \"helpUrl\": \"\",\n    \"extensions\": 'aggregate_Extensions'\n  }, {\n    \"type\": \"aggregate_count\",\n    \"message0\": \"COUNT %1\",\n    \"args0\": [{\n      \"type\": \"input_value\",\n      \"name\": \"count\",\n      \"check\": [\"CONDITIONCHOOSER\", 'freeinput']\n    }],\n    \"inputsInline\": true,\n    \"output\": 'aggregate_count',\n    \"colour\": '#C440C4',\n    \"tooltip\": \"\",\n    \"helpUrl\": \"\",\n    \"extensions\": 'aggregate_Extensions'\n  }]);\n  if (!Blockly.Extensions.isRegistered('aggregate_Extensions')) {\n    Blockly.Extensions.register('aggregate_Extensions', function () {\n      this.setOnChange(function (changeEvent) {\n        var parent = this.getSurroundParent();\n        if (parent != null && parent.toString().includes('ORDER BY') && this.getField('orderA') == null) {\n          this.appendDummyInput('listOrder').appendField(\" \").appendField(new Blockly.FieldDropdown([[\"\\u2009\", \"BLANK\"], [\"ASC\", \"ASC\"], [\"DESC\", \"DESC\"]]), \"orderA\");\n        } else if ((parent == null || !parent.toString().includes('ORDER BY')) && this.getField('orderA') != null) {\n          this.removeInput('listOrder');\n        }\n      });\n    });\n  }\n  pythonGenerator.forBlock['aggregate_min'] = function (block, generator) {\n    var argument = pythonGenerator.statementToCode(block, 'min');\n    argument = argument.trim();\n    var code = 'MIN(' + argument + ')';\n    if (block.getInput('listOrder')) {\n      var chosenOrderA = pythonGenerator.variableDB_.getName(block.getFieldValue('orderA'));\n      if (chosenOrderA != 'BLANK') {\n        code = code.concat(' ' + chosenOrderA);\n      }\n    }\n    return code;\n  };\n  pythonGenerator.forBlock['aggregate_avg'] = function (block, generator) {\n    var argument = pythonGenerator.statementToCode(block, 'avg');\n    argument = argument.trim();\n    var code = 'AVG(' + argument + ')';\n    if (block.getInput('listOrder')) {\n      var chosenOrderA = pythonGenerator.variableDB_.getName(block.getFieldValue('orderA'));\n      if (chosenOrderA != 'BLANK') {\n        code = code.concat(' ' + chosenOrderA);\n      }\n    }\n    return code;\n  };\n  pythonGenerator.forBlock['aggregate_max'] = function (block, generator) {\n    var argument = pythonGenerator.statementToCode(block, 'max');\n    argument = argument.trim();\n    var code = 'MAX(' + argument + ')';\n    if (block.getInput('listOrder')) {\n      var chosenOrderA = pythonGenerator.variableDB_.getName(block.getFieldValue('orderA'));\n      if (chosenOrderA != 'BLANK') {\n        code = code.concat(' ' + chosenOrderA);\n      }\n    }\n    return code;\n  };\n  pythonGenerator.forBlock['aggregate_sum'] = function (block, generator) {\n    var argument = pythonGenerator.statementToCode(block, 'sum');\n    argument = argument.trim();\n    var code = 'SUM(' + argument + ')';\n    if (block.getInput('listOrder')) {\n      var chosenOrderA = pythonGenerator.variableDB_.getName(block.getFieldValue('orderA'));\n      if (chosenOrderA != 'BLANK') {\n        code = code.concat(' ' + chosenOrderA);\n      }\n    }\n    return code;\n  };\n  pythonGenerator.forBlock['aggregate_count'] = function (block, generator) {\n    var argument = pythonGenerator.statementToCode(block, 'count');\n    argument = argument.trim();\n    var code = 'COUNT(' + argument + ')';\n    if (block.getInput('listOrder')) {\n      var chosenOrderA = pythonGenerator.variableDB_.getName(block.getFieldValue('orderA'));\n      if (chosenOrderA != 'BLANK') {\n        code = code.concat(' ' + chosenOrderA);\n      }\n    }\n    return code;\n  };\n};\ndefineAggregateBlocks();","map":{"version":3,"names":["Blockly","pythonGenerator","defineAggregateBlocks","defineBlocksWithJsonArray","Extensions","isRegistered","register","setOnChange","changeEvent","parent","getSurroundParent","toString","includes","getField","appendDummyInput","appendField","FieldDropdown","removeInput","forBlock","block","generator","argument","statementToCode","trim","code","getInput","chosenOrderA","variableDB_","getName","getFieldValue","concat"],"sources":["C:/Users/janry/Music/VisualQuery/frontend/src/blocks/aggregateBlocks.js"],"sourcesContent":["import * as Blockly from 'blockly/core';\r\nimport 'blockly/blocks';\r\nimport { pythonGenerator } from 'blockly/python';\r\n\r\nexport const defineAggregateBlocks = () => {\r\n  Blockly.defineBlocksWithJsonArray([\r\n    {\r\n      \"type\": \"aggregate_min\",\r\n      \"message0\": \"MIN %1\",\r\n      \"args0\": [\r\n        {\r\n          \"type\": \"input_value\",\r\n          \"name\": \"min\",\r\n          \"check\": [\"CONDITIONCHOOSER\", 'freeinput']\r\n        },\r\n      ],\r\n      \"inputsInline\": true,\r\n      \"output\": 'aggregate_min',\r\n      \"colour\": '#C440C4',\r\n      \"tooltip\": \"\",\r\n      \"helpUrl\": \"\",\r\n      \"extensions\": 'aggregate_Extensions'\r\n    },\r\n    {\r\n      \"type\": \"aggregate_avg\",\r\n      \"message0\": \"AVG %1\",\r\n      \"args0\": [\r\n        {\r\n          \"type\": \"input_value\",\r\n          \"name\": \"avg\",\r\n          \"check\": [\"CONDITIONCHOOSER\", 'freeinput']\r\n        }\r\n      ],\r\n      \"inputsInline\": true,\r\n      \"output\": 'aggregate_avg',\r\n      \"colour\": '#C440C4',\r\n      \"tooltip\": \"\",\r\n      \"helpUrl\": \"\",\r\n      \"extensions\": 'aggregate_Extensions'\r\n    },\r\n    {\r\n      \"type\": \"aggregate_max\",\r\n      \"message0\": \"MAX %1\",\r\n      \"args0\": [\r\n        {\r\n          \"type\": \"input_value\",\r\n          \"name\": \"max\",\r\n          \"check\": [\"CONDITIONCHOOSER\", 'freeinput']\r\n        }\r\n      ],\r\n      \"inputsInline\": true,\r\n      \"output\": 'aggregate_max',\r\n      \"colour\": '#C440C4',\r\n      \"tooltip\": \"\",\r\n      \"helpUrl\": \"\",\r\n      \"extensions\": 'aggregate_Extensions'\r\n    },\r\n    {\r\n      \"type\": \"aggregate_sum\",\r\n      \"message0\": \"SUM %1\",\r\n      \"args0\": [\r\n        {\r\n          \"type\": \"input_value\",\r\n          \"name\": \"sum\",\r\n          \"check\": [\"CONDITIONCHOOSER\", 'freeinput', 'MATH']\r\n        }\r\n      ],\r\n      \"inputsInline\": true,\r\n      \"output\": 'aggregate_sum',\r\n      \"colour\": '#C440C4',\r\n      \"tooltip\": \"\",\r\n      \"helpUrl\": \"\",\r\n      \"extensions\": 'aggregate_Extensions'\r\n    },\r\n    {\r\n      \"type\": \"aggregate_count\",\r\n      \"message0\": \"COUNT %1\",\r\n      \"args0\": [\r\n        {\r\n          \"type\": \"input_value\",\r\n          \"name\": \"count\",\r\n          \"check\": [\"CONDITIONCHOOSER\", 'freeinput']\r\n        }\r\n      ],\r\n      \"inputsInline\": true,\r\n      \"output\": 'aggregate_count',\r\n      \"colour\": '#C440C4',\r\n      \"tooltip\": \"\",\r\n      \"helpUrl\": \"\",\r\n      \"extensions\": 'aggregate_Extensions'\r\n    }\r\n  ]);\r\n\r\n  if (!Blockly.Extensions.isRegistered('aggregate_Extensions')) {\r\n    Blockly.Extensions.register('aggregate_Extensions', function() {\r\n      this.setOnChange(function(changeEvent) {\r\n        var parent = this.getSurroundParent();\r\n        if (parent != null && parent.toString().includes('ORDER BY') && (this.getField('orderA') == null)) {\r\n          this.appendDummyInput('listOrder').appendField(\" \").appendField(new Blockly.FieldDropdown([[\"\\u2009\",\"BLANK\"], [\"ASC\",\"ASC\"], [\"DESC\",\"DESC\"]]), \"orderA\");\r\n        } else if ((parent == null || (!(parent.toString().includes('ORDER BY')))) && this.getField('orderA') != null) {\r\n          this.removeInput('listOrder');\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  pythonGenerator.forBlock['aggregate_min'] = function(block, generator) {\r\n    var argument = pythonGenerator.statementToCode(block, 'min');\r\n    argument = argument.trim();\r\n    var code = 'MIN(' + argument + ')';\r\n\r\n    if (block.getInput('listOrder')) {\r\n      var chosenOrderA = pythonGenerator.variableDB_.getName(block.getFieldValue('orderA'));\r\n      if (chosenOrderA != 'BLANK') {\r\n        code = code.concat(' ' + chosenOrderA);\r\n      }\r\n    }\r\n    return code;\r\n  };\r\n\r\n  pythonGenerator.forBlock['aggregate_avg'] = function(block, generator) {\r\n    var argument = pythonGenerator.statementToCode(block, 'avg');\r\n    argument = argument.trim();\r\n    var code = 'AVG(' + argument + ')';\r\n\r\n    if (block.getInput('listOrder')) {\r\n      var chosenOrderA = pythonGenerator.variableDB_.getName(block.getFieldValue('orderA'));\r\n      if (chosenOrderA != 'BLANK') {\r\n        code = code.concat(' ' + chosenOrderA);\r\n      }\r\n    }\r\n    return code;\r\n  };\r\n\r\n  pythonGenerator.forBlock['aggregate_max'] = function(block, generator) {\r\n    var argument = pythonGenerator.statementToCode(block, 'max');\r\n    argument = argument.trim();\r\n    var code = 'MAX(' + argument + ')';\r\n\r\n    if (block.getInput('listOrder')) {\r\n      var chosenOrderA = pythonGenerator.variableDB_.getName(block.getFieldValue('orderA'));\r\n      if (chosenOrderA != 'BLANK') {\r\n        code = code.concat(' ' + chosenOrderA);\r\n      }\r\n    }\r\n    return code;\r\n  };\r\n\r\n  pythonGenerator.forBlock['aggregate_sum'] = function(block, generator) {\r\n    var argument = pythonGenerator.statementToCode(block, 'sum');\r\n    argument = argument.trim();\r\n    var code = 'SUM(' + argument + ')';\r\n\r\n    if (block.getInput('listOrder')) {\r\n      var chosenOrderA = pythonGenerator.variableDB_.getName(block.getFieldValue('orderA'));\r\n      if (chosenOrderA != 'BLANK') {\r\n        code = code.concat(' ' + chosenOrderA);\r\n      }\r\n    }\r\n    return code;\r\n  };\r\n\r\n  pythonGenerator.forBlock['aggregate_count'] = function(block, generator) {\r\n    var argument = pythonGenerator.statementToCode(block, 'count');\r\n    argument = argument.trim();\r\n    var code = 'COUNT(' + argument + ')';\r\n\r\n    if (block.getInput('listOrder')) {\r\n      var chosenOrderA = pythonGenerator.variableDB_.getName(block.getFieldValue('orderA'));\r\n      if (chosenOrderA != 'BLANK') {\r\n        code = code.concat(' ' + chosenOrderA);\r\n      }\r\n    }\r\n    return code;\r\n  };\r\n};\r\n\r\ndefineAggregateBlocks();\r\n"],"mappings":"AAAA,OAAO,KAAKA,OAAO,MAAM,cAAc;AACvC,OAAO,gBAAgB;AACvB,SAASC,eAAe,QAAQ,gBAAgB;AAEhD,OAAO,MAAMC,qBAAqB,GAAGA,CAAA,KAAM;EACzCF,OAAO,CAACG,yBAAyB,CAAC,CAChC;IACE,MAAM,EAAE,eAAe;IACvB,UAAU,EAAE,QAAQ;IACpB,OAAO,EAAE,CACP;MACE,MAAM,EAAE,aAAa;MACrB,MAAM,EAAE,KAAK;MACb,OAAO,EAAE,CAAC,kBAAkB,EAAE,WAAW;IAC3C,CAAC,CACF;IACD,cAAc,EAAE,IAAI;IACpB,QAAQ,EAAE,eAAe;IACzB,QAAQ,EAAE,SAAS;IACnB,SAAS,EAAE,EAAE;IACb,SAAS,EAAE,EAAE;IACb,YAAY,EAAE;EAChB,CAAC,EACD;IACE,MAAM,EAAE,eAAe;IACvB,UAAU,EAAE,QAAQ;IACpB,OAAO,EAAE,CACP;MACE,MAAM,EAAE,aAAa;MACrB,MAAM,EAAE,KAAK;MACb,OAAO,EAAE,CAAC,kBAAkB,EAAE,WAAW;IAC3C,CAAC,CACF;IACD,cAAc,EAAE,IAAI;IACpB,QAAQ,EAAE,eAAe;IACzB,QAAQ,EAAE,SAAS;IACnB,SAAS,EAAE,EAAE;IACb,SAAS,EAAE,EAAE;IACb,YAAY,EAAE;EAChB,CAAC,EACD;IACE,MAAM,EAAE,eAAe;IACvB,UAAU,EAAE,QAAQ;IACpB,OAAO,EAAE,CACP;MACE,MAAM,EAAE,aAAa;MACrB,MAAM,EAAE,KAAK;MACb,OAAO,EAAE,CAAC,kBAAkB,EAAE,WAAW;IAC3C,CAAC,CACF;IACD,cAAc,EAAE,IAAI;IACpB,QAAQ,EAAE,eAAe;IACzB,QAAQ,EAAE,SAAS;IACnB,SAAS,EAAE,EAAE;IACb,SAAS,EAAE,EAAE;IACb,YAAY,EAAE;EAChB,CAAC,EACD;IACE,MAAM,EAAE,eAAe;IACvB,UAAU,EAAE,QAAQ;IACpB,OAAO,EAAE,CACP;MACE,MAAM,EAAE,aAAa;MACrB,MAAM,EAAE,KAAK;MACb,OAAO,EAAE,CAAC,kBAAkB,EAAE,WAAW,EAAE,MAAM;IACnD,CAAC,CACF;IACD,cAAc,EAAE,IAAI;IACpB,QAAQ,EAAE,eAAe;IACzB,QAAQ,EAAE,SAAS;IACnB,SAAS,EAAE,EAAE;IACb,SAAS,EAAE,EAAE;IACb,YAAY,EAAE;EAChB,CAAC,EACD;IACE,MAAM,EAAE,iBAAiB;IACzB,UAAU,EAAE,UAAU;IACtB,OAAO,EAAE,CACP;MACE,MAAM,EAAE,aAAa;MACrB,MAAM,EAAE,OAAO;MACf,OAAO,EAAE,CAAC,kBAAkB,EAAE,WAAW;IAC3C,CAAC,CACF;IACD,cAAc,EAAE,IAAI;IACpB,QAAQ,EAAE,iBAAiB;IAC3B,QAAQ,EAAE,SAAS;IACnB,SAAS,EAAE,EAAE;IACb,SAAS,EAAE,EAAE;IACb,YAAY,EAAE;EAChB,CAAC,CACF,CAAC;EAEF,IAAI,CAACH,OAAO,CAACI,UAAU,CAACC,YAAY,CAAC,sBAAsB,CAAC,EAAE;IAC5DL,OAAO,CAACI,UAAU,CAACE,QAAQ,CAAC,sBAAsB,EAAE,YAAW;MAC7D,IAAI,CAACC,WAAW,CAAC,UAASC,WAAW,EAAE;QACrC,IAAIC,MAAM,GAAG,IAAI,CAACC,iBAAiB,CAAC,CAAC;QACrC,IAAID,MAAM,IAAI,IAAI,IAAIA,MAAM,CAACE,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,UAAU,CAAC,IAAK,IAAI,CAACC,QAAQ,CAAC,QAAQ,CAAC,IAAI,IAAK,EAAE;UACjG,IAAI,CAACC,gBAAgB,CAAC,WAAW,CAAC,CAACC,WAAW,CAAC,GAAG,CAAC,CAACA,WAAW,CAAC,IAAIf,OAAO,CAACgB,aAAa,CAAC,CAAC,CAAC,QAAQ,EAAC,OAAO,CAAC,EAAE,CAAC,KAAK,EAAC,KAAK,CAAC,EAAE,CAAC,MAAM,EAAC,MAAM,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC;QAC5J,CAAC,MAAM,IAAI,CAACP,MAAM,IAAI,IAAI,IAAK,CAAEA,MAAM,CAACE,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,UAAU,CAAG,KAAK,IAAI,CAACC,QAAQ,CAAC,QAAQ,CAAC,IAAI,IAAI,EAAE;UAC7G,IAAI,CAACI,WAAW,CAAC,WAAW,CAAC;QAC/B;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEAhB,eAAe,CAACiB,QAAQ,CAAC,eAAe,CAAC,GAAG,UAASC,KAAK,EAAEC,SAAS,EAAE;IACrE,IAAIC,QAAQ,GAAGpB,eAAe,CAACqB,eAAe,CAACH,KAAK,EAAE,KAAK,CAAC;IAC5DE,QAAQ,GAAGA,QAAQ,CAACE,IAAI,CAAC,CAAC;IAC1B,IAAIC,IAAI,GAAG,MAAM,GAAGH,QAAQ,GAAG,GAAG;IAElC,IAAIF,KAAK,CAACM,QAAQ,CAAC,WAAW,CAAC,EAAE;MAC/B,IAAIC,YAAY,GAAGzB,eAAe,CAAC0B,WAAW,CAACC,OAAO,CAACT,KAAK,CAACU,aAAa,CAAC,QAAQ,CAAC,CAAC;MACrF,IAAIH,YAAY,IAAI,OAAO,EAAE;QAC3BF,IAAI,GAAGA,IAAI,CAACM,MAAM,CAAC,GAAG,GAAGJ,YAAY,CAAC;MACxC;IACF;IACA,OAAOF,IAAI;EACb,CAAC;EAEDvB,eAAe,CAACiB,QAAQ,CAAC,eAAe,CAAC,GAAG,UAASC,KAAK,EAAEC,SAAS,EAAE;IACrE,IAAIC,QAAQ,GAAGpB,eAAe,CAACqB,eAAe,CAACH,KAAK,EAAE,KAAK,CAAC;IAC5DE,QAAQ,GAAGA,QAAQ,CAACE,IAAI,CAAC,CAAC;IAC1B,IAAIC,IAAI,GAAG,MAAM,GAAGH,QAAQ,GAAG,GAAG;IAElC,IAAIF,KAAK,CAACM,QAAQ,CAAC,WAAW,CAAC,EAAE;MAC/B,IAAIC,YAAY,GAAGzB,eAAe,CAAC0B,WAAW,CAACC,OAAO,CAACT,KAAK,CAACU,aAAa,CAAC,QAAQ,CAAC,CAAC;MACrF,IAAIH,YAAY,IAAI,OAAO,EAAE;QAC3BF,IAAI,GAAGA,IAAI,CAACM,MAAM,CAAC,GAAG,GAAGJ,YAAY,CAAC;MACxC;IACF;IACA,OAAOF,IAAI;EACb,CAAC;EAEDvB,eAAe,CAACiB,QAAQ,CAAC,eAAe,CAAC,GAAG,UAASC,KAAK,EAAEC,SAAS,EAAE;IACrE,IAAIC,QAAQ,GAAGpB,eAAe,CAACqB,eAAe,CAACH,KAAK,EAAE,KAAK,CAAC;IAC5DE,QAAQ,GAAGA,QAAQ,CAACE,IAAI,CAAC,CAAC;IAC1B,IAAIC,IAAI,GAAG,MAAM,GAAGH,QAAQ,GAAG,GAAG;IAElC,IAAIF,KAAK,CAACM,QAAQ,CAAC,WAAW,CAAC,EAAE;MAC/B,IAAIC,YAAY,GAAGzB,eAAe,CAAC0B,WAAW,CAACC,OAAO,CAACT,KAAK,CAACU,aAAa,CAAC,QAAQ,CAAC,CAAC;MACrF,IAAIH,YAAY,IAAI,OAAO,EAAE;QAC3BF,IAAI,GAAGA,IAAI,CAACM,MAAM,CAAC,GAAG,GAAGJ,YAAY,CAAC;MACxC;IACF;IACA,OAAOF,IAAI;EACb,CAAC;EAEDvB,eAAe,CAACiB,QAAQ,CAAC,eAAe,CAAC,GAAG,UAASC,KAAK,EAAEC,SAAS,EAAE;IACrE,IAAIC,QAAQ,GAAGpB,eAAe,CAACqB,eAAe,CAACH,KAAK,EAAE,KAAK,CAAC;IAC5DE,QAAQ,GAAGA,QAAQ,CAACE,IAAI,CAAC,CAAC;IAC1B,IAAIC,IAAI,GAAG,MAAM,GAAGH,QAAQ,GAAG,GAAG;IAElC,IAAIF,KAAK,CAACM,QAAQ,CAAC,WAAW,CAAC,EAAE;MAC/B,IAAIC,YAAY,GAAGzB,eAAe,CAAC0B,WAAW,CAACC,OAAO,CAACT,KAAK,CAACU,aAAa,CAAC,QAAQ,CAAC,CAAC;MACrF,IAAIH,YAAY,IAAI,OAAO,EAAE;QAC3BF,IAAI,GAAGA,IAAI,CAACM,MAAM,CAAC,GAAG,GAAGJ,YAAY,CAAC;MACxC;IACF;IACA,OAAOF,IAAI;EACb,CAAC;EAEDvB,eAAe,CAACiB,QAAQ,CAAC,iBAAiB,CAAC,GAAG,UAASC,KAAK,EAAEC,SAAS,EAAE;IACvE,IAAIC,QAAQ,GAAGpB,eAAe,CAACqB,eAAe,CAACH,KAAK,EAAE,OAAO,CAAC;IAC9DE,QAAQ,GAAGA,QAAQ,CAACE,IAAI,CAAC,CAAC;IAC1B,IAAIC,IAAI,GAAG,QAAQ,GAAGH,QAAQ,GAAG,GAAG;IAEpC,IAAIF,KAAK,CAACM,QAAQ,CAAC,WAAW,CAAC,EAAE;MAC/B,IAAIC,YAAY,GAAGzB,eAAe,CAAC0B,WAAW,CAACC,OAAO,CAACT,KAAK,CAACU,aAAa,CAAC,QAAQ,CAAC,CAAC;MACrF,IAAIH,YAAY,IAAI,OAAO,EAAE;QAC3BF,IAAI,GAAGA,IAAI,CAACM,MAAM,CAAC,GAAG,GAAGJ,YAAY,CAAC;MACxC;IACF;IACA,OAAOF,IAAI;EACb,CAAC;AACH,CAAC;AAEDtB,qBAAqB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
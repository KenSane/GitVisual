{"ast":null,"code":"import * as Blockly from 'blockly/core';\nimport 'blockly/blocks';\nimport { pythonGenerator } from 'blockly/python';\nexport const defineLogicalOperatorBlocks = () => {\n  Blockly.defineBlocksWithJsonArray([{\n    \"type\": \"not\",\n    \"message0\": \"NOT %1\",\n    \"args0\": [{\n      \"type\": \"input_value\",\n      \"name\": \"Con0\",\n      \"check\": [\"OR\", \"AND\", 'COMPARE', 'BETWEEN']\n    }],\n    \"output\": \"NOT\",\n    \"colour\": '#5270DE',\n    \"tooltip\": \"\",\n    \"helpUrl\": \"\"\n  }]);\n  pythonGenerator.forBlock['not'] = function (block, generator) {\n    var code = 'NOT ' + pythonGenerator.statementToCode(block, 'Con0');\n    return code;\n  };\n  Blockly.defineBlocksWithJsonArray([{\n    \"type\": \"and\",\n    \"message0\": \"AND %1\",\n    \"args0\": [{\n      \"type\": \"input_value\",\n      \"name\": \"Con0\",\n      \"check\": [\"Number\", \"COMPARE\", \"NULLIFIER\", \"INNIFIER\", \"OR\", 'NOT', 'AND', 'BETWEEN']\n    }],\n    \"message1\": \"    %1\",\n    \"args1\": [{\n      \"type\": \"input_value\",\n      \"name\": \"sCon0\",\n      \"check\": [\"Number\", \"COMPARE\", \"NULLIFIER\", \"INNIFIER\", \"OR\", 'NOT', 'AND', 'BETWEEN']\n    }],\n    \"output\": \"AND\",\n    \"colour\": '#5270DE',\n    \"tooltip\": \"\",\n    \"helpUrl\": \"\"\n  }]);\n  pythonGenerator.forBlock['and'] = function (block, generator) {\n    var argument0 = pythonGenerator.statementToCode(block, 'Con0');\n    var argument1 = pythonGenerator.statementToCode(block, 'sCon0');\n    var n = 1;\n    var code = argument0 + ' AND ' + argument1 + ' ';\n    while (block.getInput('Con' + n)) {\n      var additionalCode = pythonGenerator.statementToCode(block, 'Con' + n);\n      code = code.concat('AND ' + additionalCode);\n      ++n;\n    }\n    code = '(' + code + ')';\n    return code;\n  };\n  Blockly.defineBlocksWithJsonArray([{\n    \"type\": \"or\",\n    \"message0\": \"OR %1\",\n    \"args0\": [{\n      \"type\": \"input_value\",\n      \"name\": \"Con0\",\n      \"check\": [\"COMPARE\", \"NULLIFIER\", \"INNIFIER\", \"AND\", 'NOT', 'OR', 'BETWEEN']\n    }],\n    \"message1\": \"    %1\",\n    \"args1\": [{\n      \"type\": \"input_value\",\n      \"name\": \"sCon0\",\n      \"check\": [\"COMPARE\", \"NULLIFIER\", \"INNIFIER\", \"AND\", 'NOT', 'OR', 'BETWEEN']\n    }],\n    \"output\": \"OR\",\n    \"colour\": '#5270DE',\n    \"tooltip\": \"\",\n    \"helpUrl\": \"\"\n  }]);\n  pythonGenerator.forBlock['or'] = function (block, generator) {\n    var argument0 = pythonGenerator.statementToCode(block, 'Con0');\n    var argument1 = pythonGenerator.statementToCode(block, 'sCon0');\n    var n = 1;\n    var code = argument0 + ' OR ' + argument1 + ' ';\n    while (block.getInput('Con' + n)) {\n      var additionalCode = pythonGenerator.statementToCode(block, 'Con' + n);\n      code = code.concat('OR ' + additionalCode);\n      ++n;\n    }\n    code = '(' + code + ')';\n    return code;\n  };\n  Blockly.defineBlocksWithJsonArray([{\n    \"type\": \"between\",\n    \"message0\": \"    %1\",\n    \"args0\": [{\n      \"type\": \"input_value\",\n      \"name\": \"Con0\",\n      \"check\": ['CONDITIONCHOOSER', 'freeinput']\n    }],\n    \"message1\": \"BETWEEN %1\",\n    \"args1\": [{\n      \"type\": \"input_value\",\n      \"name\": \"Con1\",\n      \"check\": ['AND']\n    }],\n    \"output\": \"BETWEEN\",\n    \"colour\": '#5270DE',\n    \"tooltip\": \"\",\n    \"helpUrl\": \"\"\n  }]);\n  pythonGenerator.forBlock['between'] = function (block, generator) {\n    var argument0 = pythonGenerator.statementToCode(block, 'Con0');\n    var argument1 = pythonGenerator.statementToCode(block, 'Con1');\n    var code = argument0 + ' BETWEEN ' + argument1;\n    code = code.replace('(', '');\n    code = code.replace(')', '');\n    return code;\n  };\n  Blockly.defineBlocksWithJsonArray([{\n    \"type\": \"innifier\",\n    \"message0\": \"%1 %2 %3\",\n    \"args0\": [{\n      \"type\": \"input_value\",\n      \"name\": \"1ConditionC\",\n      \"check\": [\"MATH\", \"CONDITIONCHOOSER\", 'freeinput']\n    }, {\n      \"type\": \"field_dropdown\",\n      \"name\": \"OP\",\n      \"options\": [[\"IN\", \"I\"], [\"NOT IN\", \"NI\"]]\n    }, {\n      \"type\": \"input_statement\",\n      \"name\": \"2ConditionC\",\n      \"check\": [\"SELECT\"]\n    }],\n    \"inputsInline\": true,\n    \"output\": \"INNIFIER\",\n    \"colour\": '#5270DE',\n    \"tooltip\": \"\",\n    \"helpUrl\": \"\"\n  }]);\n  pythonGenerator.forBlock['innifier'] = function (block, generator) {\n    var OPERATORS = {\n      'I': 'IN',\n      'NI': 'NOT IN'\n    };\n    var operator = OPERATORS[block.getFieldValue('OP')];\n    var argument0 = pythonGenerator.statementToCode(block, '1ConditionC');\n    var argument1 = pythonGenerator.statementToCode(block, '2ConditionC');\n    if (operator == 'IN' || operator == 'NOT IN') {\n      if (argument1.includes(';')) {\n        if (argument1.includes(';SELECT')) {\n          argument1 = argument1.replace(/;SELECT/g, '<BR> union <BR>select');\n        }\n        argument1 = argument1.replace(/;/g, ' ');\n      }\n      argument1 = '(' + argument1 + ')';\n    }\n    var code = argument0 + ' ' + operator + ' ' + argument1;\n    return code;\n  };\n};\ndefineLogicalOperatorBlocks();","map":{"version":3,"names":["Blockly","pythonGenerator","defineLogicalOperatorBlocks","defineBlocksWithJsonArray","forBlock","block","generator","code","statementToCode","argument0","argument1","n","getInput","additionalCode","concat","replace","OPERATORS","operator","getFieldValue","includes"],"sources":["C:/Users/janry/OneDrive/Desktop/NEWTHESIS/VisualQuery/frontend/src/blocks/logicalOperators.js"],"sourcesContent":["import * as Blockly from 'blockly/core';\r\nimport 'blockly/blocks';\r\nimport { pythonGenerator } from 'blockly/python';\r\n\r\nexport const defineLogicalOperatorBlocks = () => {\r\n  Blockly.defineBlocksWithJsonArray([\r\n    {\r\n      \"type\": \"not\",\r\n      \"message0\": \"NOT %1\",\r\n      \"args0\": [\r\n        {\r\n          \"type\": \"input_value\",\r\n          \"name\": \"Con0\",\r\n          \"check\": [\"OR\", \"AND\", 'COMPARE', 'BETWEEN']\r\n        }\r\n      ],\r\n      \"output\": \"NOT\",\r\n      \"colour\": '#5270DE',\r\n      \"tooltip\": \"\",\r\n      \"helpUrl\": \"\"\r\n    }\r\n  ]);\r\n\r\n  pythonGenerator.forBlock['not'] = function(block, generator) {\r\n    var code = 'NOT ' + pythonGenerator.statementToCode(block, 'Con0');\r\n    return code;\r\n  };\r\n\r\n  Blockly.defineBlocksWithJsonArray([\r\n    {\r\n      \"type\": \"and\",\r\n      \"message0\": \"AND %1\",\r\n      \"args0\": [\r\n        {\r\n          \"type\": \"input_value\",\r\n          \"name\": \"Con0\",\r\n          \"check\": [\"Number\", \"COMPARE\", \"NULLIFIER\", \"INNIFIER\", \"OR\", 'NOT', 'AND', 'BETWEEN']\r\n        }\r\n      ],\r\n      \"message1\": \"    %1\",\r\n      \"args1\": [\r\n        {\r\n          \"type\": \"input_value\",\r\n          \"name\": \"sCon0\",\r\n          \"check\": [\"Number\", \"COMPARE\", \"NULLIFIER\", \"INNIFIER\", \"OR\", 'NOT', 'AND', 'BETWEEN']\r\n        }\r\n      ],\r\n      \"output\": \"AND\",\r\n      \"colour\": '#5270DE',\r\n      \"tooltip\": \"\",\r\n      \"helpUrl\": \"\"\r\n    }\r\n  ]);\r\n\r\n  pythonGenerator.forBlock['and'] = function(block, generator) {\r\n    var argument0 = pythonGenerator.statementToCode(block, 'Con0');\r\n    var argument1 = pythonGenerator.statementToCode(block, 'sCon0');\r\n    var n = 1;\r\n    var code = argument0 + ' AND ' + argument1 + ' ';\r\n    while (block.getInput('Con' + n)) {\r\n      var additionalCode = pythonGenerator.statementToCode(block, 'Con' + n);\r\n      code = code.concat('AND ' + additionalCode);\r\n      ++n;\r\n    }\r\n    code = '(' + code + ')';\r\n    return code;\r\n  };\r\n\r\n  Blockly.defineBlocksWithJsonArray([\r\n    {\r\n      \"type\": \"or\",\r\n      \"message0\": \"OR %1\",\r\n      \"args0\": [\r\n        {\r\n          \"type\": \"input_value\",\r\n          \"name\": \"Con0\",\r\n          \"check\": [\"COMPARE\", \"NULLIFIER\", \"INNIFIER\", \"AND\", 'NOT', 'OR', 'BETWEEN']\r\n        }\r\n      ],\r\n      \"message1\": \"    %1\",\r\n      \"args1\": [\r\n        {\r\n          \"type\": \"input_value\",\r\n          \"name\": \"sCon0\",\r\n          \"check\": [\"COMPARE\", \"NULLIFIER\", \"INNIFIER\", \"AND\", 'NOT', 'OR', 'BETWEEN']\r\n        }\r\n      ],\r\n      \"output\": \"OR\",\r\n      \"colour\": '#5270DE',\r\n      \"tooltip\": \"\",\r\n      \"helpUrl\": \"\"\r\n    }\r\n  ]);\r\n\r\n  pythonGenerator.forBlock['or'] = function(block, generator) {\r\n    var argument0 = pythonGenerator.statementToCode(block, 'Con0');\r\n    var argument1 = pythonGenerator.statementToCode(block, 'sCon0');\r\n    var n = 1;\r\n    var code = argument0 + ' OR ' + argument1 + ' ';\r\n    while (block.getInput('Con' + n)) {\r\n      var additionalCode = pythonGenerator.statementToCode(block, 'Con' + n);\r\n      code = code.concat('OR ' + additionalCode);\r\n      ++n;\r\n    }\r\n    code = '(' + code + ')';\r\n    return code;\r\n  };\r\n\r\n  Blockly.defineBlocksWithJsonArray([\r\n    {\r\n      \"type\": \"between\",\r\n      \"message0\": \"    %1\",\r\n      \"args0\": [\r\n        {\r\n          \"type\": \"input_value\",\r\n          \"name\": \"Con0\",\r\n          \"check\": ['CONDITIONCHOOSER', 'freeinput']\r\n        }\r\n      ],\r\n      \"message1\": \"BETWEEN %1\",\r\n      \"args1\": [\r\n        {\r\n          \"type\": \"input_value\",\r\n          \"name\": \"Con1\",\r\n          \"check\": ['AND']\r\n        }\r\n      ],\r\n      \"output\": \"BETWEEN\",\r\n      \"colour\": '#5270DE',\r\n      \"tooltip\": \"\",\r\n      \"helpUrl\": \"\"\r\n    }\r\n  ]);\r\n\r\n  pythonGenerator.forBlock['between'] = function(block, generator) {\r\n    var argument0 = pythonGenerator.statementToCode(block, 'Con0');\r\n    var argument1 = pythonGenerator.statementToCode(block, 'Con1');\r\n    var code = argument0 + ' BETWEEN ' + argument1;\r\n    code = code.replace('(', '');\r\n    code = code.replace(')', '');\r\n    return code;\r\n  };\r\n\r\n  Blockly.defineBlocksWithJsonArray([{\r\n    \"type\": \"innifier\",\r\n    \"message0\": \"%1 %2 %3\",\r\n    \"args0\": [\r\n      {\r\n        \"type\": \"input_value\",\r\n        \"name\": \"1ConditionC\",\r\n        \"check\": [\"MATH\", \"CONDITIONCHOOSER\", 'freeinput'],\r\n      },\r\n      {\r\n        \"type\": \"field_dropdown\",\r\n        \"name\": \"OP\",\r\n        \"options\": [\r\n          [\"IN\", \"I\"],\r\n          [\"NOT IN\", \"NI\"],\r\n        ]\r\n      },\r\n      {\r\n        \"type\": \"input_statement\",\r\n        \"name\": \"2ConditionC\",\r\n        \"check\": [\"SELECT\"],\r\n      },\r\n    ],\r\n    \"inputsInline\": true,\r\n    \"output\": \"INNIFIER\",\r\n    \"colour\": '#5270DE',\r\n    \"tooltip\": \"\",\r\n    \"helpUrl\": \"\"\r\n  }]);\r\n\r\n  pythonGenerator.forBlock['innifier'] = function(block, generator) {\r\n    var OPERATORS = {\r\n      'I': 'IN',\r\n      'NI': 'NOT IN'\r\n    };\r\n    var operator = OPERATORS[block.getFieldValue('OP')];\r\n    var argument0 = pythonGenerator.statementToCode(block, '1ConditionC');\r\n    var argument1 = pythonGenerator.statementToCode(block, '2ConditionC');\r\n    if (operator == 'IN' || operator == 'NOT IN') {\r\n      if (argument1.includes(';')) {\r\n        if (argument1.includes(';SELECT')) {\r\n          argument1 = argument1.replace(/;SELECT/g, '<BR> union <BR>select');\r\n        }\r\n        argument1 = argument1.replace(/;/g, ' ');\r\n      }\r\n      argument1 = '(' + argument1 + ')';\r\n    }\r\n    var code = argument0 + ' ' + operator + ' ' + argument1;\r\n    return code;\r\n  };\r\n};\r\n\r\ndefineLogicalOperatorBlocks();\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
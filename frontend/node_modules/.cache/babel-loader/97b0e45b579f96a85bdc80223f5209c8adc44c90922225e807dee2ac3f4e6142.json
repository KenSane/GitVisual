{"ast":null,"code":"import * as Blockly from 'blockly/core';\nimport 'blockly/blocks';\nimport { pythonGenerator } from 'blockly/python';\nexport const defineAliasBlocks = () => {\n  Blockly.defineBlocksWithJsonArray([{\n    \"type\": \"tablename_as\",\n    \"message0\": \"%1 AS %2\",\n    \"args0\": [{\n      \"type\": \"input_value\",\n      \"name\": \"as_oldName\",\n      \"check\": [\"aggregate_min\", \"aggregate_max\", \"aggregate_avg\", \"aggregate_count\", \"aggregate_sum\", \"CONDITIONCHOOSER\", \"freeinput\"]\n    }, {\n      \"type\": \"input_value\",\n      \"name\": \"as_newName\",\n      \"check\": [\"freeinput\"]\n    }],\n    \"inputsInline\": true,\n    \"output\": 'tablename_as',\n    \"colour\": '#0ddb69',\n    \"tooltip\": \"\",\n    \"helpUrl\": \"\",\n    \"extensions\": 'assExtensions'\n  }]);\n\n  // Check if the extension is already registered\n  if (!Blockly.Extensions.isRegistered('assExtensions')) {\n    Blockly.Extensions.register('assExtensions', function () {\n      this.setOnChange(function (changeEvent) {\n        var parent = this.getSurroundParent();\n        if (parent != null) {\n          if (parent.toDevString().includes('select_from') || parent.toDevString().includes('all_join')) {\n            this.getInput('as_oldName').setCheck(\"TABLE\");\n          } else {\n            this.getInput('as_oldName').setCheck([\"freeinput\", \"aggregate_min\", \"aggregate_max\", \"aggregate_avg\", \"aggregate_count\", \"aggregate_sum\", \"CONDITIONCHOOSER\"]);\n          }\n        }\n      });\n    });\n  }\n  pythonGenerator.forBlock['tablename_as'] = function (block, generator) {\n    var argumentOld = pythonGenerator.statementToCode(block, 'as_oldName');\n    var argumentNew = pythonGenerator.statementToCode(block, 'as_newName');\n    var code = argumentOld + ' AS ' + argumentNew;\n    return code;\n  };\n};\ndefineAliasBlocks();","map":{"version":3,"names":["Blockly","pythonGenerator","defineAliasBlocks","defineBlocksWithJsonArray","Extensions","isRegistered","register","setOnChange","changeEvent","parent","getSurroundParent","toDevString","includes","getInput","setCheck","forBlock","block","generator","argumentOld","statementToCode","argumentNew","code"],"sources":["C:/Users/janry/Music/VisualQuery/frontend/src/blocks/aliases.js"],"sourcesContent":["import * as Blockly from 'blockly/core';\r\nimport 'blockly/blocks';\r\nimport { pythonGenerator } from 'blockly/python';\r\n\r\nexport const defineAliasBlocks = () => {\r\n  Blockly.defineBlocksWithJsonArray([\r\n    {\r\n      \"type\": \"tablename_as\",\r\n      \"message0\": \"%1 AS %2\",\r\n      \"args0\": [\r\n        {\r\n          \"type\": \"input_value\",\r\n          \"name\": \"as_oldName\",\r\n          \"check\": [\"aggregate_min\", \"aggregate_max\", \"aggregate_avg\", \"aggregate_count\", \"aggregate_sum\", \"CONDITIONCHOOSER\", \"freeinput\"]\r\n        },\r\n        {\r\n          \"type\": \"input_value\",\r\n          \"name\": \"as_newName\",\r\n          \"check\": [\"freeinput\"]\r\n        }\r\n      ],\r\n      \"inputsInline\": true,\r\n      \"output\": 'tablename_as',\r\n      \"colour\": '#0ddb69',\r\n      \"tooltip\": \"\",\r\n      \"helpUrl\": \"\",\r\n      \"extensions\": 'assExtensions'\r\n    }\r\n  ]);\r\n\r\n  // Check if the extension is already registered\r\n  if (!Blockly.Extensions.isRegistered('assExtensions')) {\r\n    Blockly.Extensions.register('assExtensions', function() {\r\n      this.setOnChange(function(changeEvent) {\r\n        var parent = this.getSurroundParent();\r\n        if (parent != null) {\r\n          if (parent.toDevString().includes('select_from') || parent.toDevString().includes('all_join')) {\r\n            this.getInput('as_oldName').setCheck(\"TABLE\");\r\n          } else {\r\n            this.getInput('as_oldName').setCheck([\"freeinput\", \"aggregate_min\", \"aggregate_max\", \"aggregate_avg\", \"aggregate_count\", \"aggregate_sum\", \"CONDITIONCHOOSER\"]);\r\n          }\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  pythonGenerator.forBlock['tablename_as'] = function(block, generator) {\r\n    var argumentOld = pythonGenerator.statementToCode(block, 'as_oldName');\r\n    var argumentNew = pythonGenerator.statementToCode(block, 'as_newName');\r\n    var code = argumentOld + ' AS ' + argumentNew;\r\n    return code;\r\n  };\r\n};\r\n\r\ndefineAliasBlocks();\r\n"],"mappings":"AAAA,OAAO,KAAKA,OAAO,MAAM,cAAc;AACvC,OAAO,gBAAgB;AACvB,SAASC,eAAe,QAAQ,gBAAgB;AAEhD,OAAO,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EACrCF,OAAO,CAACG,yBAAyB,CAAC,CAChC;IACE,MAAM,EAAE,cAAc;IACtB,UAAU,EAAE,UAAU;IACtB,OAAO,EAAE,CACP;MACE,MAAM,EAAE,aAAa;MACrB,MAAM,EAAE,YAAY;MACpB,OAAO,EAAE,CAAC,eAAe,EAAE,eAAe,EAAE,eAAe,EAAE,iBAAiB,EAAE,eAAe,EAAE,kBAAkB,EAAE,WAAW;IAClI,CAAC,EACD;MACE,MAAM,EAAE,aAAa;MACrB,MAAM,EAAE,YAAY;MACpB,OAAO,EAAE,CAAC,WAAW;IACvB,CAAC,CACF;IACD,cAAc,EAAE,IAAI;IACpB,QAAQ,EAAE,cAAc;IACxB,QAAQ,EAAE,SAAS;IACnB,SAAS,EAAE,EAAE;IACb,SAAS,EAAE,EAAE;IACb,YAAY,EAAE;EAChB,CAAC,CACF,CAAC;;EAEF;EACA,IAAI,CAACH,OAAO,CAACI,UAAU,CAACC,YAAY,CAAC,eAAe,CAAC,EAAE;IACrDL,OAAO,CAACI,UAAU,CAACE,QAAQ,CAAC,eAAe,EAAE,YAAW;MACtD,IAAI,CAACC,WAAW,CAAC,UAASC,WAAW,EAAE;QACrC,IAAIC,MAAM,GAAG,IAAI,CAACC,iBAAiB,CAAC,CAAC;QACrC,IAAID,MAAM,IAAI,IAAI,EAAE;UAClB,IAAIA,MAAM,CAACE,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,aAAa,CAAC,IAAIH,MAAM,CAACE,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,UAAU,CAAC,EAAE;YAC7F,IAAI,CAACC,QAAQ,CAAC,YAAY,CAAC,CAACC,QAAQ,CAAC,OAAO,CAAC;UAC/C,CAAC,MAAM;YACL,IAAI,CAACD,QAAQ,CAAC,YAAY,CAAC,CAACC,QAAQ,CAAC,CAAC,WAAW,EAAE,eAAe,EAAE,eAAe,EAAE,eAAe,EAAE,iBAAiB,EAAE,eAAe,EAAE,kBAAkB,CAAC,CAAC;UAChK;QACF;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEAb,eAAe,CAACc,QAAQ,CAAC,cAAc,CAAC,GAAG,UAASC,KAAK,EAAEC,SAAS,EAAE;IACpE,IAAIC,WAAW,GAAGjB,eAAe,CAACkB,eAAe,CAACH,KAAK,EAAE,YAAY,CAAC;IACtE,IAAII,WAAW,GAAGnB,eAAe,CAACkB,eAAe,CAACH,KAAK,EAAE,YAAY,CAAC;IACtE,IAAIK,IAAI,GAAGH,WAAW,GAAG,MAAM,GAAGE,WAAW;IAC7C,OAAOC,IAAI;EACb,CAAC;AACH,CAAC;AAEDnB,iBAAiB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\janry\\\\OneDrive\\\\Desktop\\\\NEWTHESIS\\\\VisualQuery\\\\frontend\\\\src\\\\component\\\\VisualProgramming.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport * as Blockly from 'blockly/core';\nimport 'blockly/blocks';\nimport { pythonGenerator as Python } from 'blockly/python'; // Import Python generator\nimport { defineSelectBlocks } from '../blocks/select';\nimport { defineTableBlocks } from '../blocks/tablesAndAttributes';\nimport { defineAliasBlocks } from '../blocks/aliases';\nimport { defineLogicalOperatorBlocks } from '../blocks/logicalOperators';\nimport { defineMathematicalOperatorBlocks } from '../blocks/mathematicalOperators';\nimport { defineValueInputBlocks } from '../blocks/valueInputs';\nimport { defineAggregateBlocks } from '../blocks/aggregateBlocks';\nimport './visprog.css';\nimport axios from 'axios';\nimport blockDiagram from '../collegediagram.png'; // Import your image\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VisualProgramming = () => {\n  _s();\n  const [workspace, setWorkspace] = useState(null);\n  const [queryResult, setQueryResult] = useState(null);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    // Define all custom blocks before initializing Blockly\n    defineSelectBlocks();\n    defineTableBlocks();\n    defineAliasBlocks();\n    defineLogicalOperatorBlocks();\n    defineMathematicalOperatorBlocks();\n    defineValueInputBlocks();\n    defineAggregateBlocks();\n    const blocklyDiv = document.getElementById('blocklyDiv');\n    const toolboxXml = `\n      <xml id=\"toolbox\" style=\"display: none;\">\n        <category name=\"Statements & Clauses\" colour=\"#8007f2\">\n          <category name=\"Statements\">\n            <block type=\"select\"></block>\n          </category>\n          <category name=\"Clauses\">\n            <block type=\"select_from\"></block>\n            <block type=\"all_join\"></block>\n            <block type=\"select_where\"></block>\n            <block type=\"select_groupby\"></block>\n            <block type=\"select_having\"></block>\n            <block type=\"select_orderby\"></block>\n          </category>\n        </category>\n        <category name=\"Tables & Attributes\" colour=\"#f1bf06\">\n          <block type=\"allchooser\"></block>\n          <block type=\"table\"></block>\n          <block type=\"conditionchooser\"></block>\n        </category>\n        <category name=\"Aliases\" colour=\"#0ddb69\">\n          <block type=\"tablename_as\"></block>\n        </category>\n        <category name=\"Operators\" colour=\"#5270DE\">\n          <category name=\"Logical\">\n            <block type=\"not\"></block>\n            <block type=\"and\"></block>\n            <block type=\"or\"></block>\n            <block type=\"between\"></block>\n            <block type=\"innifier\"></block>\n          </category>\n          <category name=\"Mathematical\">\n            <block type=\"compare\"></block>\n            <block type=\"compareDerived\"></block>\n            <block type=\"math\"></block>\n          </category>\n        </category>\n        <category name=\"Value Inputs\" colour=\"#FC4758\">\n          <block type=\"freeinput\"></block>\n          <block type=\"boolean\"></block>\n          <block type=\"datepicker\"></block>\n          <block type=\"number\"></block>\n        </category>\n        <category name=\"Aggregates\" colour=\"#C440C4\">\n          <block type=\"aggregate_min\"></block>\n          <block type=\"aggregate_avg\"></block>\n          <block type=\"aggregate_max\"></block>\n          <block type=\"aggregate_sum\"></block>\n          <block type=\"aggregate_count\"></block>\n        </category>\n      </xml>\n    `;\n    const workspace = Blockly.inject(blocklyDiv, {\n      toolbox: toolboxXml\n    });\n    setWorkspace(workspace);\n  }, []);\n  const generateQuery = () => {\n    if (workspace) {\n      const code = Python.workspaceToCode(workspace);\n      console.log('Generated Query:', code); // Log the generated query\n      return code;\n    }\n    return '';\n  };\n  const executeQuery = async () => {\n    const query = generateQuery();\n    try {\n      const response = await axios.post('http://127.0.0.1:8000/api/execute-query/', {\n        query\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      setQueryResult(response.data);\n    } catch (error) {\n      setError(error);\n      console.error('Axios Error:', error); // Log the error\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"blocklyDiv\",\n      style: {\n        width: '100%',\n        height: '600px',\n        paddingTop: '100px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: executeQuery,\n        children: \"Execute Query\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), queryResult && /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: JSON.stringify(queryResult, null, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 23\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Class Diagram\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: blockDiagram,\n        alt: \"Class Diagram\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n_s(VisualProgramming, \"GOs4L+GMnEguXAL/0pgv9UfCd9E=\");\n_c = VisualProgramming;\nexport default VisualProgramming;\nvar _c;\n$RefreshReg$(_c, \"VisualProgramming\");","map":{"version":3,"names":["React","useState","useEffect","Blockly","pythonGenerator","Python","defineSelectBlocks","defineTableBlocks","defineAliasBlocks","defineLogicalOperatorBlocks","defineMathematicalOperatorBlocks","defineValueInputBlocks","defineAggregateBlocks","axios","blockDiagram","jsxDEV","_jsxDEV","VisualProgramming","_s","workspace","setWorkspace","queryResult","setQueryResult","error","setError","blocklyDiv","document","getElementById","toolboxXml","inject","toolbox","generateQuery","code","workspaceToCode","console","log","executeQuery","query","response","post","headers","data","children","id","style","width","height","paddingTop","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","JSON","stringify","message","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/janry/OneDrive/Desktop/NEWTHESIS/VisualQuery/frontend/src/component/VisualProgramming.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport * as Blockly from 'blockly/core';\r\nimport 'blockly/blocks';\r\nimport { pythonGenerator as Python } from 'blockly/python'; // Import Python generator\r\nimport { defineSelectBlocks } from '../blocks/select';\r\nimport { defineTableBlocks } from '../blocks/tablesAndAttributes';\r\nimport { defineAliasBlocks } from '../blocks/aliases';\r\nimport { defineLogicalOperatorBlocks } from '../blocks/logicalOperators';\r\nimport { defineMathematicalOperatorBlocks } from '../blocks/mathematicalOperators';\r\nimport { defineValueInputBlocks } from '../blocks/valueInputs';\r\nimport { defineAggregateBlocks } from '../blocks/aggregateBlocks';\r\nimport './visprog.css';\r\nimport axios from 'axios';\r\nimport blockDiagram from '../collegediagram.png'; // Import your image\r\n\r\nconst VisualProgramming = () => {\r\n  const [workspace, setWorkspace] = useState(null);\r\n  const [queryResult, setQueryResult] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Define all custom blocks before initializing Blockly\r\n    defineSelectBlocks();\r\n    defineTableBlocks();\r\n    defineAliasBlocks();\r\n    defineLogicalOperatorBlocks();\r\n    defineMathematicalOperatorBlocks();\r\n    defineValueInputBlocks();\r\n    defineAggregateBlocks();\r\n\r\n    const blocklyDiv = document.getElementById('blocklyDiv');\r\n    const toolboxXml = `\r\n      <xml id=\"toolbox\" style=\"display: none;\">\r\n        <category name=\"Statements & Clauses\" colour=\"#8007f2\">\r\n          <category name=\"Statements\">\r\n            <block type=\"select\"></block>\r\n          </category>\r\n          <category name=\"Clauses\">\r\n            <block type=\"select_from\"></block>\r\n            <block type=\"all_join\"></block>\r\n            <block type=\"select_where\"></block>\r\n            <block type=\"select_groupby\"></block>\r\n            <block type=\"select_having\"></block>\r\n            <block type=\"select_orderby\"></block>\r\n          </category>\r\n        </category>\r\n        <category name=\"Tables & Attributes\" colour=\"#f1bf06\">\r\n          <block type=\"allchooser\"></block>\r\n          <block type=\"table\"></block>\r\n          <block type=\"conditionchooser\"></block>\r\n        </category>\r\n        <category name=\"Aliases\" colour=\"#0ddb69\">\r\n          <block type=\"tablename_as\"></block>\r\n        </category>\r\n        <category name=\"Operators\" colour=\"#5270DE\">\r\n          <category name=\"Logical\">\r\n            <block type=\"not\"></block>\r\n            <block type=\"and\"></block>\r\n            <block type=\"or\"></block>\r\n            <block type=\"between\"></block>\r\n            <block type=\"innifier\"></block>\r\n          </category>\r\n          <category name=\"Mathematical\">\r\n            <block type=\"compare\"></block>\r\n            <block type=\"compareDerived\"></block>\r\n            <block type=\"math\"></block>\r\n          </category>\r\n        </category>\r\n        <category name=\"Value Inputs\" colour=\"#FC4758\">\r\n          <block type=\"freeinput\"></block>\r\n          <block type=\"boolean\"></block>\r\n          <block type=\"datepicker\"></block>\r\n          <block type=\"number\"></block>\r\n        </category>\r\n        <category name=\"Aggregates\" colour=\"#C440C4\">\r\n          <block type=\"aggregate_min\"></block>\r\n          <block type=\"aggregate_avg\"></block>\r\n          <block type=\"aggregate_max\"></block>\r\n          <block type=\"aggregate_sum\"></block>\r\n          <block type=\"aggregate_count\"></block>\r\n        </category>\r\n      </xml>\r\n    `;\r\n\r\n    const workspace = Blockly.inject(blocklyDiv, {\r\n      toolbox: toolboxXml,\r\n    });\r\n    setWorkspace(workspace);\r\n  }, []);\r\n\r\n  const generateQuery = () => {\r\n    if (workspace) {\r\n      const code = Python.workspaceToCode(workspace);\r\n      console.log('Generated Query:', code);  // Log the generated query\r\n      return code;\r\n    }\r\n    return '';\r\n  };\r\n\r\n  const executeQuery = async () => {\r\n    const query = generateQuery();\r\n    try {\r\n      const response = await axios.post('http://127.0.0.1:8000/api/execute-query/', { query }, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n      setQueryResult(response.data);\r\n    } catch (error) {\r\n      setError(error);\r\n      console.error('Axios Error:', error);  // Log the error\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div id=\"blocklyDiv\" style={{ width: '100%', height: '600px', paddingTop: '100px' }} />\r\n      <div className=\"button-container\">\r\n        <button onClick={executeQuery}>Execute Query</button>\r\n      </div>\r\n      {queryResult && <pre>{JSON.stringify(queryResult, null, 2)}</pre>}\r\n      {error && <p>Error: {error.message}</p>}\r\n      <div className=\"center-container\">\r\n        <h2>Class Diagram</h2>\r\n        <img src={blockDiagram} alt=\"Class Diagram\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VisualProgramming;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}